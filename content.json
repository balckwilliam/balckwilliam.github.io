{"pages":[{"title":"404","text":"","path":"404/index.html","date":"04-21","excerpt":""},{"title":"留言板","text":"请把你想说的写出来吧！！！","path":"categories/index.html","date":"04-21","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"04-21","excerpt":""},{"title":"linuxbash","text":"","path":"linuxbash/index.html","date":"04-21","excerpt":""},{"title":"关于本博客","text":"关于我一个Github上的博客 向优秀的markdown编辑器致敬向优秀的ZEROKISEKI主题致敬向优秀的hexo项目致敬 本博客的点滴 记录了一些常用的脚本 主要是Linux的一键脚本 也有一些我自己写的Linux一键脚本 还有一些自己的项目代码 可能也有一些Windows软件的分享 本博客经历了几天的部署和修改，于2018-4-21制作完成 希望这个博客j可以一直开下去 可能会有一些Bug，但是我会积极的修正的 本人还是一个学生狗，因此不定时会更新 最后，向伟大的Github致敬 有问题反馈在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流 邮件(admin@gerga.ga) QQ: 1412981048 Github: @balckwilliam 支持我在兴趣的驱动下,做了一个博客，有欣喜，也还有汗水，希望你喜欢我的作品，同时也能支持一下。 感激感谢以下的项目,排名不分先后 ZEROKISEKI hexo nodejs 关于作者1234var BlackWilliam = &#123; nickName : \"BlackWilliam\", site : \"http://zangdi.firday.top\"&#125;","path":"about/index.html","date":"04-21","excerpt":""}],"posts":[{"title":"ovs-sriov综合策略脚本","text":"这个一键脚本是我的一个毕设，目前还是一个测试版实验使用的是:intel 82599 网卡 支持SRIOV容器使用的是 Docker Ubuntu系统使用的是:Centos 7.4 欢迎访问我的GitHub 为了提供一系列建议作者:ZD点击进入此项目的GitHub一、优化之前同主机不同服务进行一系列请求 不同主机跨主机访问 二、优化之后同主机不同服务进行一系列请求 不同主机跨主机访问 Docker镜像请自己准备，此脚本和本人并不提供！！！123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196#!bin/sh#pipework br1 -i eth0 test1 192.168.2.2/24haproxycfg() &#123; sleep 1 rm -rf /haproxy_test mkdir /haproxy_test echo \"输入的参数个数为: $#\" #“$#”会显示传给该函数的参数个数 echo \"所有参数为: $@\" #“$@”会显示所有传给函数的参数 echo \"$1: $1\" echo \"$2: $2\" echo \"$3: $3\" native_ip=$1 next_ip1=$2 next_ip2=$3 echo \"#---------------------------------------------------------------------# Example configuration for a possible web application. See the# full configuration options online.## http://haproxy.1wt.eu/download/1.4/doc/configuration.txt##---------------------------------------------------------------------#---------------------------------------------------------------------# Global settings#---------------------------------------------------------------------global # to have these messages end up in /var/log/haproxy.log you will # need to: # # 1) configure syslog to accept network log events. This is done # by adding the '-r' option to the SYSLOGD_OPTIONS in # /etc/sysconfig/syslog # # 2) configure local2 events to go to the /var/log/haproxy.log # file. A line like the following can be added to # /etc/sysconfig/syslog # # local2.* /var/log/haproxy.log # log 127.0.0.1 local2 chroot /var/lib/haproxy pidfile /var/run/haproxy.pid maxconn 1000000 user haproxy group haproxy daemon # turn on stats unix socket stats socket /var/lib/haproxy/stats#---------------------------------------------------------------------# main frontend which proxys to the backends#---------------------------------------------------------------------frontend haproxy $native_ip:80 mode tcp log global option tcplog timeout client 3600s backlog 4096 maxconn 1000000 default_backend sink#---------------------------------------------------------------------# round robin balancing between the various backends#---------------------------------------------------------------------backend sink balance roundrobin mode tcp option log-health-checks option redispatch option tcplog server app1 $next_ip1 server app2 $next_ip2 #server app1 172.88.0.4:80# server app1 172.18.60.100:50001# server app2 173.168.100.7:50002# server app3 173.168.100.7:50003# server app4 173.168.100.7:50004 timeout connect 1s timeout queue 5s timeout server 3600s\"&gt;&gt;/haproxy_test/haproxy.cfg&#125;iptablescfg()&#123; sleep 1 #br=$1 iptables_sriov=$1 ip=$2 ip2=$3 next_ip=$4 netcard_name1=$5 netcard_name2=$6 ip3=$7 sleep 1 docker run -itd --privileged=true --net=none --name=$iptables_sriov 6d6fd32fa013 /bin/bash sleep 1 #pipework $br -i eth0 $iptables_br $ip/24'@'$getway pipework --direct-phys $netcard_name1 -i eth0 $iptables_sriov $ip/24 sleep 1 ovs-docker add-port br0 eth1 $iptables_sriov --ipaddress=$ip2/24 #pipework $br -i eth1 $iptables_br $ip2/24'@'$getway pipework --direct-phys $netcard_name2 -i eth2 $iptables_sriov $ip3/24 sleep 1 docker exec -it $iptables_sriov iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j DNAT --to $next_ip:80 sleep 1 docker exec -it $iptables_sriov iptables -t nat -A POSTROUTING -j MASQUERADE -o eth1&#125;haproxy_run()&#123; sleep 1 haproxy_name=$1 sriov_ip=$2 haproxy_next_ip1=$3 haproxy_next_ip2=$4 haproxy_netcardname=$5 ovs_briage=$6 #ovs_netcard=$7 ovs_address=$7 docker run -itd --privileged=true --net=none --name=$haproxy_name 878f003a137e /bin/bash pipework --direct-phys $haproxy_netcardname -i eth0 $haproxy_name $sriov_ip/24 add_ovs_switch $ovs_briage eth1 $haproxy_name $ovs_address sleep 1 docker exec -it $haproxy_name iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j DNAT --to $haproxy_next_ip1:80 sleep 1 docker exec -it $haproxy_name iptables -t nat -A POSTROUTING -j MASQUERADE -o eth1 #docker exec -it $haproxy_name ip route add 192.168.1.0/24 via $sriov_ip haproxycfg $ovs_address $haproxy_next_ip1 $haproxy_next_ip2 docker cp /haproxy_test/haproxy.cfg $haproxy_name:/root/ docker exec -it $haproxy_name haproxy -f /root/haproxy.cfg &gt;/dev/null&#125;apache_run()&#123; sleep 1 apache2_name=$1 apache2_ip=$2 apache_netcardname=$3 apache_ovs_brige=$4 apache_ovs_ip=$5 docker run -itd --privileged=true --net=none --name=$apache2_name 42468c9f6ce6 /bin/bash pipework --direct-phys $apache_netcardname -i eth0 $apache2_name $apache2_ip/24 ovs-docker add-port $apache_ovs_brige eth1 $apache2_name --ipaddress=$apache_ovs_ip/24 docker exec -it $apache2_name /etc/init.d/apache2 start &gt;/dev/null #docker exec -it $apache2_name ip route add 192.168.1.0/24 via $apache2_ip&#125;add_ovs_switch()&#123; sleep 1 ovs_briage=$1 docker_netcard=$2 docker_name=$3 docker_ipaddress=$4 ovs-docker add-port $ovs_briage $docker_netcard $docker_name --ipaddress=$docker_ipaddress/24 #ovs-docker add-port br0 eth0 haproxy --ipaddress=192.168.30.2/24&#125;haproxy_run_ovs()&#123; sleep 1 haproxy_name=$1 current_ip=$2 haproxy_next_ip1=$3 haproxy_next_ip2=$4 ovs_briage=$5 netcardname=$6 ip_sriov=$7 docker run -itd --privileged=true --net=none --name=$haproxy_name 878f003a137e /bin/bash ovs-docker add-port $ovs_briage eth0 $haproxy_name --ipaddress=$current_ip/24 pipework --direct-phys $netcardname -i eth1 $haproxy_name $ip_sriov/24 haproxycfg $current_ip $haproxy_next_ip1 $haproxy_next_ip2 docker cp /haproxy_test/haproxy.cfg $haproxy_name:/root/ docker exec -it $haproxy_name haproxy -f /root/haproxy.cfg &gt;/dev/null #docker exec -it $haproxy_name ip route add 192.168.1.0/24 via $ip_sriov&#125;on_start()&#123;#配置文件 iptablescfg iptables_sriov 192.168.1.3 172.17.1.2 172.17.1.3 enp9s21f6 enp9s22 192.168.1.21 haproxy_run_ovs haproxy_sriov3 172.17.1.3 172.17.1.4 172.17.1.5 br0 enp9s27f6 192.168.1.22 haproxy_run haproxy_sriov4 192.168.1.23 172.17.1.6 172.17.1.6 enp9s28 br0 172.17.1.4 haproxy_run haproxy_sriov5 192.168.1.24 172.17.1.6 172.17.1.6 enp9s28f2 br0 172.17.1.4 haproxy_run haproxy_sriov6 192.168.1.25 172.17.1.7 172.17.1.7 enp9s28f4 br0 172.17.1.5 haproxy_run haproxy_sriov7 192.168.1.26 172.17.1.8 172.17.1.8 enp9s28f6 br0 172.17.1.6 haproxy_run haproxy_sriov8 192.168.1.27 172.17.1.9 172.17.1.9 enp9s29 br0 172.17.1.7 haproxy_run haproxy_sriov9 192.168.1.28 172.17.1.10 172.17.1.10 enp9s29f2 br0 172.17.1.8 haproxy_run haproxy_sriov10 192.168.1.29 172.17.1.11 172.17.1.11 enp9s29f4 br0 172.17.1.9 haproxy_run haproxy_sriov11 192.168.1.30 172.17.1.12 172.17.1.12 enp9s29f6 br0 172.17.1.10 haproxy_run haproxy_sriov12 192.168.1.31 172.17.1.13 172.17.1.13 enp9s30 br0 172.17.1.11 haproxy_run haproxy_sriov13 192.168.1.32 172.17.1.14 172.17.1.14 enp9s30f2 br0 172.17.1.12 haproxy_run haproxy_sriov14 192.168.1.33 172.17.1.15 172.17.1.15 enp9s30f4 br0 172.17.1.13 haproxy_run haproxy_sriov15 192.168.1.34 172.17.1.16 172.17.1.16 enp9s30f6 br0 172.17.1.14 haproxy_run haproxy_sriov16 192.168.1.35 172.17.1.17 172.17.1.17 enp9s16 br0 172.17.1.15 haproxy_run haproxy_sriov17 192.168.1.36 172.17.1.18 172.17.1.18 enp9s16f4 br0 172.17.1.16 haproxy_run haproxy_sriov18 192.168.1.37 172.17.1.19 172.17.1.19 enp9s16f6 br0 172.17.1.17 haproxy_run haproxy_sriov19 192.168.1.38 172.17.1.20 172.17.1.20 enp9s17 br0 172.17.1.18 haproxy_run haproxy_sriov20 192.168.1.39 172.17.1.21 172.17.1.21 enp9s17f2 br0 172.17.1.19 apache_run apaches21_sriov1 192.168.1.40 enp9s17f4 br0 172.17.1.20 apache_run apaches22_sriov2 192.168.1.41 enp9s17f6 br0 172.17.1.21&#125;on_start Create By ZD-CNU","path":"2018/04/21/ovs-sriov/","date":"04-21","excerpt":"这个一键脚本是我的一个毕设，目前还是一个测试版实验使用的是:intel 82599 网卡 支持SRIOV容器使用的是 Docker Ubuntu系统使用的是:Centos 7.4"},{"title":"linux脚本集合","text":"集成了许多linux一键脚本，个人已测试 gost一键安装脚本:1wget http://app-10063497.cossh.myqcloud.com/%E6%96%B0%E6%B7%B7%E6%B7%86ssr/gost/gost20171115.sh &amp;&amp; bash gost20171115.sh 秋水逸冰BBR一键安装脚本1wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh chmod +x bbr.sh ./bbr.sh centos BBR一键安装123wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.shchmod +x shadowsocksR.sh./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log 自己的脚本1wget http://kymg-1251387941.cosbj.myqcloud.com/yd.sh &amp;&amp; chmod +x yd.sh &amp;&amp; ./yd.sh V2ray官方Centos 7.x 一键脚本1wget http://v2ray-1251387941.cosbj.myqcloud.com/v2ray.sh &amp;&amp; chmod +x v2ray.sh &amp;&amp; ./v2ray.sh 宝塔面板(bt.cn) 快速部署Centos 安装命令：1yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh Ubuntu/Deepin 安装命令：1wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; sudo bash install.sh Debian 安装命令：1wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; bash install.sh Fedora 安装命令:1wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; bash install.sh","path":"2018/04/21/linuxbash/","date":"04-21","excerpt":"集成了许多linux一键脚本，个人已测试"},{"title":"快云OP魔改版","text":"一键脚本快云Op一键搭建脚本,修复了OP版本问题，centos 7.2搭建,已经测试成功搭建 快云一键脚本地址:1wget http://kymg-1251387941.cosbj.myqcloud.com/yd.sh &amp;&amp; chmod +x yd.sh &amp;&amp; ./yd.sh 快云截图管理界面 快云管理员面板截图 主界面随意替换 快云截图主界面 说明:暂时还有一个未修复:二级密码还未修复","path":"2018/04/21/hello-world/","date":"04-21","excerpt":"一键脚本快云Op一键搭建脚本,修复了OP版本问题，centos 7.2搭建,已经测试成功搭建"}]}