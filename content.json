{"pages":[{"title":"404","text":"","path":"404/index.html","date":"04-21","excerpt":""},{"title":"关于本博客","text":"关于我一个Github上的博客 向优秀的markdown编辑器致敬向优秀的ZEROKISEKI主题致敬向优秀的hexo项目致敬 本博客的点滴 记录了一些常用的脚本 主要是Linux的一键脚本 也有一些我自己写的Linux一键脚本 还有一些自己的项目代码 可能也有一些Windows软件的分享 本博客经历了几天的部署和修改，于2018-4-21制作完成 希望这个博客j可以一直开下去 可能会有一些Bug，但是我会积极的修正的 本人还是一个学生狗，因此不定时会更新 最后，向伟大的Github致敬 有问题反馈在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流 邮件(admin@gerga.ga) QQ: 1412981048 Github: @balckwilliam 支持我在兴趣的驱动下,做了一个博客，有欣喜，也还有汗水，希望你喜欢我的作品，同时也能支持一下。 感激感谢以下的项目,排名不分先后 ZEROKISEKI hexo nodejs 关于作者1234var BlackWilliam = &#123; nickName : \"BlackWilliam\", site : \"http://zangdi.firday.top\"&#125;","path":"about/index.html","date":"04-21","excerpt":""},{"title":"linuxbash","text":"","path":"linuxbash/index.html","date":"04-21","excerpt":""},{"title":"留言板","text":"请把你想说的写出来吧！！！","path":"categories/index.html","date":"04-21","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"04-21","excerpt":""}],"posts":[{"title":"通用无限制在 Linux VPS 上一键全自动 dd 安装 Windows 系统","text":"转载 通用无限制在 Linux VPS 上一键全自动 dd 安装 Windows 系统作者:萌咖大佬 本教程转自萌咖大佬官网点我访问无限制全自动dd安装Windows突破没有VNC,没有救援模式,内存比dd包小的限制.使用Debian Live CD中的busybox做中间媒介,经过复杂的处理,使本机的网络参数传进Windows操作系统中,即使没有DHCP能够让Windows获取网络参数,也能让Windows操作系统在开机的第一时间能够连通网络. 更新: [2018.04.03]功能合并:1. Debian/Ubuntu/CentOS 网络安装/重装系统/纯净安装 一键脚本2. [2018.03.30]优化GRUB检测测逻辑.添加组件依赖检测.修复一些已知BUG.3. [2018.03.25]优化判断逻辑.增加手动指定网络参数选项,可有效避免自动获取网络参数无效造成无法直接联网的问题. 背景:1. 带Windows的为什么就卖得那么贵?2. 当然是为了更自由的使用自己的机器. 需求: 1. 与萌咖博客中的Debian(Ubuntu)网络安装/重装一键脚本需求一样.2. 无DHCP时额外需求: iconv1234#Debian/Ubuntu## 一般自带#RedHat/CentOSyum install glibc-common 限制:1. 需要定制dd包.开启内置Administrator账户登录(配置自动登陆)..开启远程桌面(默认3389端口).禁用UAC..适当的调整防火墙.(可选) 需要相关的虚拟化驱动.VirtIO驱动(备份下载) XEN驱动(备份下载)dd包解压后的体积不能超过机器第一块硬盘的最大容积. 使用方法:1wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh -dd '[Windows dd包直连地址]' 萌咖提供的demo包(1.19G;已激活):123https://moeclub.org/get-win7embx86-auto# 该包只添加了VirtIO驱动,理论上仅能在KVM,Hyper-V构架下正常运行.# 如需在其他虚拟化构架下运行,请自行添加相关虚拟化驱动. 使用的是Windows Embedded Standard 7(Thin PC)作为底包,官方精简.如需其他组件,例如:完整的桌面特征,Windows照片查看器等.请参考: Thin PC (Win7 Embedded) 安装组件 使用示例:123#在你的机器上全新安装,如果你有VNC,可以看到全部过程.#在dd的过程中,会卡在分区的界面上,不会走进度条.完成后将会自动重启.wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh -dd 'https://moeclub.org/get-win7embx86-auto' 使用示例(指定网络参数):12345# 将X.X.X.X替换为自己的网络参数.# --ip-addr :IP Address/IP地址# --ip-mask :Netmask /子网掩码# --ip-gate :Gateway /网关# wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh --ip-addr X.X.X.X --ip-mask X.X.X.X --ip-gate X.X.X.X -dd 'https://moeclub.org/get-win7embx86-auto' 注意事项: 远程登陆账号为: Administrator 远程登陆密码为: Vicer 仅修改了主机名,可放心使用.(建议自己制作.) 使用的公用网盘,如需长期/大量使用此包请自行备份. 如果因此违反了TOS,萌咖不负任何责任.当然 博主也不会负责的 可能用到的命令:12345678910111213::以管理员身份运行CMD::::更改用户的密码net user [用户名] [密码]::激活 Administrator 账户net user Administrator /active:yes::设置 Administrator 账户密码net user Administrator [新密码]::添加用户net user [用户名] [密码] /add::将用户添加至 Administrator 组net localgroup Administrators [用户名] /add::删除用户net user [用户名] /del 温馨提示:在磁盘管理中,点击’C‘盘,右键选择’扩展卷‘,可以直接’增加‘C盘的空间.激活相关请参考: https://moeclub.org/kms 萌咖提供的可用包: 与本地用iso镜像安装过程一样,如果你有VNC,可看到全部过程.因为全新安装!!! 全新安装!!! 全新安装!!! 所以会等待久一点. Windows Embedded 8.1 Industry Pro x64 (2.87G;KVM;XEN;Hyper-V;未激活)1https://moeclub.org/get-win8embx64-auto 预览bin/bash export tmpVER=''export tmpDIST=''export tmpURL=''export tmpWORD=''export tmpMirror=''export tmpSSL=''export tmpINS=''export tmpFW=''export ipAddr=''export ipMask=''export ipGate=''export linuxdists=''export ddMode='0'export setNet='0'export isMirror='0'export FindDists='0' while [[ $# -ge 1 ]]; do case $1 in -v|--ver) shift tmpVER=\"$1\" shift ;; -d|--debian) shift linuxdists='debian' tmpDIST=\"$1\" shift ;; -u|--ubuntu) shift linuxdists='ubuntu' tmpDIST=\"$1\" shift ;; -dd|--image) shift ddMode='1' tmpURL=\"$1\" shift ;; -p|--password) shift tmpWORD=\"$1\" shift ;; --ip-addr) shift ipAddr=\"$1\" shift ;; --ip-mask) shift ipMask=\"$1\" shift ;; --ip-gate) shift ipGate=\"$1\" shift ;; -a|--auto) shift tmpINS='auto' ;; -m|--manual) shift tmpINS='manual' ;; -apt|--mirror) shift isMirror='1' tmpMirror=\"$1\" shift ;; -ssl) shift tmpSSL=\"$1\" shift ;; --firmware) shift tmpFW='1' ;; *) echo -ne \" Usage:\\n\\t$0\\t-d/--debian [\\033[33m\\033[04mdists-name\\033[0m]\\n\\t\\t\\t\\t-u/--ubuntu [\\033[04mdists-name\\033[0m]\\n\\t\\t\\t\\t-v/--ver [32/\\033[33m\\033[04mi386\\033[0m|64/amd64]\\n\\t\\t\\t\\t--ip-addr/--ip-gate/--ip-mask\\n\\t\\t\\t\\t-apt/--mirror\\n\\t\\t\\t\\t-dd/--image\\n\\t\\t\\t\\t-a/--auto\\n\\t\\t\\t\\t-m/--manual\\n\" exit 1; ;; esac done [[ \"$EUID\" -ne '0' ]] &amp;&amp; echo \"Error:This script must be run as root!\" &amp;&amp; exit 1; function CheckDependence()&#123;FullDependence='0';for BIN_DEP in `echo \"$1\" |sed 's/,/\\n/g'` do if [[ -n \"$BIN_DEP\" ]]; then Founded='0'; for BIN_PATH in `echo \"$PATH\" |sed 's/:/\\n/g'` do ls $BIN_PATH/$BIN_DEP &gt;/dev/null 2&gt;&amp;1; if [ $? == '0' ]; then Founded='1'; break; fi done if [ \"$Founded\" == '1' ]; then echo -en \"$BIN_DEP\\t\\t[\\033[32mok\\033[0m]\\n\"; else FullDependence='1'; echo -en \"$BIN_DEP\\t\\t[\\033[31mfail\\033[0m]\\n\"; fi fi doneif [ \"$FullDependence\" == '1' ]; then exit 1;fi&#125; clear &amp;&amp; echo -e \"\\n\\033[36m# Check Dependence\\033[0m\\n\"CheckDependence wget,awk,grep,sed,cut,cat,cpio,gzip [ \"$ddMode\" == '1' ] &amp;&amp; &#123;CheckDependence iconv&#125; [[ -f '/boot/grub/grub.cfg' ]] &amp;&amp; GRUBOLD='0' &amp;&amp; GRUBDIR='/boot/grub' &amp;&amp; GRUBFILE='grub.cfg';[[ -z \"$GRUBDIR\" ]] &amp;&amp; [[ -f '/boot/grub2/grub.cfg' ]] &amp;&amp; GRUBOLD='0' &amp;&amp; GRUBDIR='/boot/grub2' &amp;&amp; GRUBFILE='grub.cfg';[[ -z \"$GRUBDIR\" ]] &amp;&amp; [[ -f '/boot/grub/grub.conf' ]] &amp;&amp; GRUBOLD='1' &amp;&amp; GRUBDIR='/boot/grub' &amp;&amp; GRUBFILE='grub.conf';[ -z \"$GRUBDIR\" -o -z \"$GRUBFILE\" ] &amp;&amp; echo -ne \"Error! \\nNot Found grub path.\\n\" &amp;&amp; exit 1; [[ -n \"$tmpVER\" ]] &amp;&amp; &#123; [ \"$tmpVER\" == '32' -o \"$tmpVER\" == 'i386' ] &amp;&amp; VER='i386'; [ \"$tmpVER\" == '64' -o \"$tmpVER\" == 'amd64' ] &amp;&amp; VER='amd64';&#125;[[ -z \"$VER\" ]] &amp;&amp; VER='i386'; [[ -z \"$linuxdists\" ]] &amp;&amp; linuxdists='debian'; [[ \"$isMirror\" == '1' ]] &amp;&amp; [[ -n \"$tmpMirror\" ]] &amp;&amp; &#123; tmpDebianMirror=\"$(echo -n \"$tmpMirror\" |grep -Eo '.*\\.(\\w+)')\"; echo -n \"$tmpDebianMirror\" |grep -q '://'; [[ $? -eq '0' ]] &amp;&amp; &#123; DebianMirror=\"$(echo -n \"$tmpDebianMirror\" |awk -F'://' '&#123;print $2&#125;')\"; &#125; || &#123; DebianMirror=\"$(echo -n \"$tmpDebianMirror\")\"; &#125;&#125; || &#123; [[ \"$linuxdists\" == 'debian' ]] &amp;&amp; DebianMirror='httpredir.debian.org'; [[ \"$linuxdists\" == 'ubuntu' ]] &amp;&amp; DebianMirror='archive.ubuntu.com';&#125; [[ -z \"$DebianMirrorDirectory\" ]] &amp;&amp; [[ -n \"$DebianMirror\" ]] &amp;&amp; [[ -n \"$tmpMirror\" ]] &amp;&amp; &#123; DebianMirrorDirectory=\"$(echo -n \"$tmpMirror\" |awk -F''$&#123;DebianMirror&#125;'' '&#123;print $2&#125;' |sed 's/\\/$//g')\";&#125; [[ -n \"$DebianMirror\" ]] &amp;&amp; &#123; [[ \"$DebianMirrorDirectory\" == '/' ]] &amp;&amp; &#123; [[ \"$linuxdists\" == 'debian' ]] &amp;&amp; DebianMirrorDirectory='/debian'; [[ \"$linuxdists\" == 'ubuntu' ]] &amp;&amp; DebianMirrorDirectory='/ubuntu'; &#125; [[ -z \"$DebianMirrorDirectory\" ]] &amp;&amp; &#123; [[ \"$linuxdists\" == 'debian' ]] &amp;&amp; DebianMirrorDirectory='/debian'; [[ \"$linuxdists\" == 'ubuntu' ]] &amp;&amp; DebianMirrorDirectory='/ubuntu'; &#125;&#125; [[ -z \"$tmpDIST\" ]] &amp;&amp; &#123; [[ \"$linuxdists\" == 'debian' ]] &amp;&amp; DIST='wheezy'; [[ \"$linuxdists\" == 'ubuntu' ]] &amp;&amp; DIST='trusty';&#125; [[ -z \"$DIST\" ]] &amp;&amp; &#123; DIST=\"$(echo \"$tmpDIST\" |sed -r 's/(.*)/\\L\\1/')\"; echo \"$DIST\" |grep -q '[0-9]'; [[ $? -eq '0' ]] &amp;&amp; &#123; isDigital=\"$(echo \"$DIST\" |grep -o '[0-9\\.]\\&#123;1,\\&#125;' |sed -n '1h;1!H;$g;s/\\n//g;$p' |cut -d'.' -f1)\"; [[ -n $isDigital ]] &amp;&amp; &#123; [[ \"$isDigital\" == '7' ]] &amp;&amp; DIST='wheezy'; [[ \"$isDigital\" == '8' ]] &amp;&amp; DIST='jessie'; [[ \"$isDigital\" == '9' ]] &amp;&amp; DIST='stretch'; [[ \"$isDigital\" == '10' ]] &amp;&amp; DIST='buster'; &#125; &#125;&#125; [[ \"$ddMode\" == '1' ]] &amp;&amp; &#123; [[ -n \"$tmpURL\" ]] &amp;&amp; &#123; linuxdists='debian'; DIST='jessie'; VER='amd64'; tmpINS='auto'; DDURL=\"$tmpURL\" echo \"$DDURL\" |grep -q '^http://\\|^ftp://\\|^https://'; [[ $? -ne '0' ]] &amp;&amp; echo 'Please input vaild URL,Only support http://, ftp:// and https:// !' &amp;&amp; exit 1; [[ -n \"$tmpSSL\" ]] &amp;&amp; SSL_SUPPORT=\"$tmpSSL\"; [[ -z \"$SSL_SUPPORT\" ]] &amp;&amp; SSL_SUPPORT='https://moeclub.org/get-wget_udeb_amd64'; &#125; || &#123; echo 'Please input vaild URL! '; exit 1; &#125;&#125; DistsList=\"$(wget --no-check-certificate -qO- \"http://$DebianMirror$DebianMirrorDirectory/dists/\" |grep -o 'href=.*/\"' |cut -d'\"' -f2 |sed '/-\\|old\\|Debian\\|experimental\\|stable\\|test\\|sid\\|devel/d' |grep '^[^/]' |sed -n '1h;1!H;$g;s/\\n//g;s/\\//\\;/g;$p')\";for CheckDEB in `echo \"$DistsList\" |sed 's/;/\\n/g'` do [[ \"$CheckDEB\" == \"$DIST\" ]] &amp;&amp; FindDists='1'; [[ \"$FindDists\" == '1' ]] &amp;&amp; break; done[[ \"$FindDists\" == '0' ]] &amp;&amp; &#123; echo -ne '\\nThe dists version not found, Please check it! \\n\\n' bash $0 error; exit 1;&#125; [[ -n \"$tmpINS\" ]] &amp;&amp; &#123; [[ \"$tmpINS\" == 'auto' ]] &amp;&amp; inVNC='n'; [[ \"$tmpINS\" == 'manual' ]] &amp;&amp; inVNC='y';&#125; [ -n \"$ipAddr\" ] &amp;&amp; [ -n \"$ipMask\" ] &amp;&amp; [ -n \"$ipGate\" ] &amp;&amp; setNet='1';[[ -n \"$tmpWORD\" ]] &amp;&amp; myPASSWORD=\"$tmpWORD\";[[ -n \"$tmpFW\" ]] &amp;&amp; INCFW=\"$tmpFW\";[[ -z \"$myPASSWORD\" ]] &amp;&amp; myPASSWORD='Vicer';[[ -z \"$INCFW\" ]] &amp;&amp; INCFW='0'; clear &amp;&amp; echo -e \"\\n\\033[36m# Install\\033[0m\\n\" ASKVNC()&#123; inVNC='y'; [[ \"$ddMode\" == '0' ]] &amp;&amp; &#123; echo -ne \"\\033[34mCan you login VNC?\\033[0m\\e[33m[\\e[32my\\e[33m/n]\\e[0m \" read tmpinVNC [[ -n \"$tmpinVNC\" ]] &amp;&amp; inVNCtmp=\"$tmpinVNC\" &#125; [ \"$inVNCtmp\" == 'y' -o \"$inVNCtmp\" == 'Y' ] &amp;&amp; inVNC='y'; [ \"$inVNCtmp\" == 'n' -o \"$inVNCtmp\" == 'N' ] &amp;&amp; inVNC='n';&#125; [ \"$inVNC\" == 'y' -o \"$inVNC\" == 'n' ] || ASKVNC;[[ \"$linuxdists\" == 'debian' ]] &amp;&amp; LinuxName='Debian';[[ \"$linuxdists\" == 'ubuntu' ]] &amp;&amp; LinuxName='Ubuntu';[[ \"$ddMode\" == '0' ]] &amp;&amp; &#123; [[ \"$inVNC\" == 'y' ]] &amp;&amp; echo -e \"\\033[34mManual Mode\\033[0m insatll \\033[33m$LinuxName\\033[0m [\\033[33m$DIST\\033[0m] [\\033[33m$VER\\033[0m] in VNC. \" [[ \"$inVNC\" == 'n' ]] &amp;&amp; echo -e \"\\033[34mAuto Mode\\033[0m insatll \\033[33m$LinuxName\\033[0m [\\033[33m$DIST\\033[0m] [\\033[33m$VER\\033[0m]. \"&#125;[[ \"$ddMode\" == '1' ]] &amp;&amp; &#123; echo -ne \"\\033[34mAuto Mode\\033[0m insatll \\033[33mWindows\\033[0m\\n[\\033[33m$DDURL\\033[0m]\\n\"&#125; echo -e \"\\n[\\033[33m$LinuxName\\033[0m] [\\033[33m$DIST\\033[0m] [\\033[33m$VER\\033[0m] Downloading...\"[[ -z \"$DebianMirror\" ]] &amp;&amp; echo -ne \"\\033[31mError! \\033[0mGet debian mirror fail! \\n\" &amp;&amp; exit 1[[ -z \"$DebianMirrorDirectory\" ]] &amp;&amp; echo -ne \"\\033[31mError! \\033[0mGet debian mirror directory fail! \\n\" &amp;&amp; exit 1wget --no-check-certificate -qO '/boot/initrd.gz' \"http://$DebianMirror$DebianMirrorDirectory/dists/$DIST/main/installer-$VER/current/images/netboot/$linuxdists-installer/$VER/initrd.gz\"[[ $? -ne '0' ]] &amp;&amp; echo -ne \"\\033[31mError! \\033[0mDownload 'initrd.gz' failed! \\n\" &amp;&amp; exit 1wget --no-check-certificate -qO '/boot/linux' \"http://$DebianMirror$DebianMirrorDirectory/dists/$DIST/main/installer-$VER/current/images/netboot/$linuxdists-installer/$VER/linux\"[[ $? -ne '0' ]] &amp;&amp; echo -ne \"\\033[31mError! \\033[0mDownload 'linux' failed! \\n\" &amp;&amp; exit 1[[ \"$INCFW\" == '1' ]] &amp;&amp; [[ \"$linuxdists\" == 'debian' ]] &amp;&amp; &#123; wget --no-check-certificate -qO '/boot/firmware.cpio.gz' \"http://cdimage.debian.org/cdimage/unofficial/non-free/firmware/$DIST/current/firmware.cpio.gz\" [[ $? -ne '0' ]] &amp;&amp; echo -ne \"\\033[31mError! \\033[0mDownload 'firmware' failed! \\n\" &amp;&amp; exit 1&#125; [[ \"$setNet\" == '1' ]] &amp;&amp; &#123; IPv4=\"$ipAddr\"; MASK=\"$ipMask\"; GATE=\"$ipGate\";&#125; || &#123; DEFAULTNET=\"$(ip route show |grep -o 'default via [0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.*' |head -n1 |sed 's/proto.*\\|onlink.*//g' |awk '&#123;print $NF&#125;')\"; [[ -n \"$DEFAULTNET\" ]] &amp;&amp; IPSUB=\"$(ip addr |grep ''$&#123;DEFAULTNET&#125;'' |grep 'global' |grep 'brd' |head -n1 |grep -o '[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;/[0-9]\\&#123;1,2\\&#125;')\"; IPv4=\"$(echo -n \"$IPSUB\" |cut -d'/' -f1)\"; NETSUB=\"$(echo -n \"$IPSUB\" |grep -o '/[0-9]\\&#123;1,2\\&#125;')\"; GATE=\"$(ip route show |grep -o 'default via [0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;' |head -n1 |grep -o '[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;')\"; [[ -n \"$NETSUB\" ]] &amp;&amp; MASK=\"$(echo -n '128.0.0.0/1,192.0.0.0/2,224.0.0.0/3,240.0.0.0/4,248.0.0.0/5,252.0.0.0/6,254.0.0.0/7,255.0.0.0/8,255.128.0.0/9,255.192.0.0/10,255.224.0.0/11,255.240.0.0/12,255.248.0.0/13,255.252.0.0/14,255.254.0.0/15,255.255.0.0/16,255.255.128.0/17,255.255.192.0/18,255.255.224.0/19,255.255.240.0/20,255.255.248.0/21,255.255.252.0/22,255.255.254.0/23,255.255.255.0/24,255.255.255.128/25,255.255.255.192/26,255.255.255.224/27,255.255.255.240/28,255.255.255.248/29,255.255.255.252/30,255.255.255.254/31,255.255.255.255/32' |grep -o '[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;'$&#123;NETSUB&#125;'' |cut -d'/' -f1)\";&#125; [[ -n \"$GATE\" ]] &amp;&amp; [[ -n \"$MASK\" ]] &amp;&amp; [[ -n \"$IPv4\" ]] || &#123;echo \"Not found `ip command`, It will use `route command`.\"ipNum() &#123; local IFS='.'; read ip1 ip2 ip3 ip4 &lt;&lt;&lt;\"$1\"; echo $((ip1*(1&lt;&lt;24)+ip2*(1&lt;&lt;16)+ip3*(1&lt;&lt;8)+ip4));&#125; SelectMax()&#123;ii=0;for IPITEM in `route -n |awk -v OUT=$1 '&#123;print $OUT&#125;' |grep '[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;'` do NumTMP=\"$(ipNum $IPITEM)\"; eval \"arrayNum[$ii]='$NumTMP,$IPITEM'\"; ii=$[$ii+1]; doneecho $&#123;arrayNum[@]&#125; |sed 's/\\s/\\n/g' |sort -n -k 1 -t ',' |tail -n1 |cut -d',' -f2;&#125; [[ -z $IPv4 ]] &amp;&amp; IPv4=\"$(ifconfig |grep 'Bcast' |head -n1 |grep -o '[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;' |head -n1)\";[[ -z $GATE ]] &amp;&amp; GATE=\"$(SelectMax 2)\";[[ -z $MASK ]] &amp;&amp; MASK=\"$(SelectMax 3)\"; [[ -n \"$GATE\" ]] &amp;&amp; [[ -n \"$MASK\" ]] &amp;&amp; [[ -n \"$IPv4\" ]] || &#123; echo \"Error! Not configure network. \"; exit 1;&#125;&#125; [[ \"$setNet\" != '1' ]] &amp;&amp; [[ -f '/etc/network/interfaces' ]] &amp;&amp; &#123; [[ -z \"$(sed -n '/iface.*inet static/p' /etc/network/interfaces)\" ]] &amp;&amp; AutoNet='1' || AutoNet='0'; [[ -d /etc/network/interfaces.d ]] &amp;&amp; &#123; ICFGN=\"$(find /etc/network/interfaces.d -name '*.cfg' |wc -l)\" || ICFGN='0'; [[ \"$ICFGN\" -ne '0' ]] &amp;&amp; &#123; for NetCFG in `ls -1 /etc/network/interfaces.d/*.cfg` do [[ -z \"$(cat $NetCFG | sed -n '/iface.*inet static/p')\" ]] &amp;&amp; AutoNet='1' || AutoNet='0'; [[ \"$AutoNet\" -eq '0' ]] &amp;&amp; break; done &#125; &#125;&#125; [[ \"$setNet\" != '1' ]] &amp;&amp; [[ -d '/etc/sysconfig/network-scripts' ]] &amp;&amp; &#123; ICFGN=\"$(find /etc/sysconfig/network-scripts -name 'ifcfg-*' |grep -v 'lo'|wc -l)\" || ICFGN='0'; [[ \"$ICFGN\" -ne '0' ]] &amp;&amp; &#123; for NetCFG in `ls -1 /etc/sysconfig/network-scripts/ifcfg-* |grep -v 'lo$' |grep -v ':[0-9]\\&#123;1,\\&#125;'` do [[ -n \"$(cat $NetCFG | sed -n '/BOOTPROTO.*[dD][hH][cC][pP]/p')\" ]] &amp;&amp; AutoNet='1' || &#123; AutoNet='0' &amp;&amp; . $NetCFG; [[ -n $NETMASK ]] &amp;&amp; MASK=\"$NETMASK\"; [[ -n $GATEWAY ]] &amp;&amp; GATE=\"$GATEWAY\"; &#125; [[ \"$AutoNet\" -eq '0' ]] &amp;&amp; break; done &#125;&#125; [[ ! -f $GRUBDIR/$GRUBFILE ]] &amp;&amp; echo \"Error! Not Found $GRUBFILE. \" &amp;&amp; exit 1; [[ ! -f $GRUBDIR/$GRUBFILE.old ]] &amp;&amp; [[ -f $GRUBDIR/$GRUBFILE.bak ]] &amp;&amp; mv -f $GRUBDIR/$GRUBFILE.bak $GRUBDIR/$GRUBFILE.old;mv -f $GRUBDIR/$GRUBFILE $GRUBDIR/$GRUBFILE.bak;[[ -f $GRUBDIR/$GRUBFILE.old ]] &amp;&amp; cat $GRUBDIR/$GRUBFILE.old &gt;$GRUBDIR/$GRUBFILE || cat $GRUBDIR/$GRUBFILE.bak &gt;$GRUBDIR/$GRUBFILE; [[ \"$GRUBOLD\" == '0' ]] &amp;&amp; &#123; READGRUB='/tmp/grub.read' cat $GRUBDIR/$GRUBFILE |sed -n '1h;1!H;$g;s/\\n/+++/g;$p' |grep -oPm 1 'menuentry\\ .*\\&#123;.*\\&#125;\\+\\+\\+' |sed 's/\\+\\+\\+/\\n/g' &gt;$READGRUB LoadNum=\"$(cat $READGRUB |grep -c 'menuentry ')\" if [[ \"$LoadNum\" -eq '1' ]]; then cat $READGRUB |sed '/^$/d' &gt;/tmp/grub.new; elif [[ \"$LoadNum\" -gt '1' ]]; then CFG0=\"$(awk '/menuentry /&#123;print NR&#125;' $READGRUB|head -n 1)\"; CFG2=\"$(awk '/menuentry /&#123;print NR&#125;' $READGRUB|head -n 2 |tail -n 1)\"; CFG1=\"\"; for tmpCFG in `awk '/&#125;/&#123;print NR&#125;' $READGRUB` do [ \"$tmpCFG\" -gt \"$CFG0\" -a \"$tmpCFG\" -lt \"$CFG2\" ] &amp;&amp; CFG1=\"$tmpCFG\"; done [[ -z \"$CFG1\" ]] &amp;&amp; &#123; echo \"Error! read $GRUBFILE. \"; exit 1; &#125; sed -n \"$CFG0,$CFG1\"p $READGRUB &gt;/tmp/grub.new; [[ -f /tmp/grub.new ]] &amp;&amp; [[ \"$(grep -c '&#123;' /tmp/grub.new)\" -eq \"$(grep -c '&#125;' /tmp/grub.new)\" ]] || &#123; echo -ne \"\\033[31mError! \\033[0mNot configure $GRUBFILE. \\n\"; exit 1; &#125; fi [ ! -f /tmp/grub.new ] &amp;&amp; echo \"Error! $GRUBFILE. \" &amp;&amp; exit 1; sed -i \"/menuentry.*/c\\menuentry\\ \\'Install OS \\[$DIST\\ $VER\\]\\'\\ --class debian\\ --class\\ gnu-linux\\ --class\\ gnu\\ --class\\ os\\ \\&#123;\" /tmp/grub.new sed -i \"/echo.*Loading/d\" /tmp/grub.new;&#125; [[ \"$GRUBOLD\" == '1' ]] &amp;&amp; &#123; CFG0=\"$(awk '/title /&#123;print NR&#125;' $GRUBDIR/$GRUBFILE|head -n 1)\"; CFG1=\"$(awk '/title /&#123;print NR&#125;' $GRUBDIR/$GRUBFILE|head -n 2 |tail -n 1)\"; [[ -n $CFG0 ]] &amp;&amp; [ -z $CFG1 -o $CFG1 == $CFG0 ] &amp;&amp; sed -n \"$CFG0,$\"p $GRUBDIR/$GRUBFILE &gt;/tmp/grub.new; [[ -n $CFG0 ]] &amp;&amp; [ -z $CFG1 -o $CFG1 != $CFG0 ] &amp;&amp; sed -n \"$CFG0,$CFG1\"p $GRUBDIR/$GRUBFILE &gt;/tmp/grub.new; [[ ! -f /tmp/grub.new ]] &amp;&amp; echo \"Error! configure append $GRUBFILE. \" &amp;&amp; exit 1; sed -i \"/title.*/c\\title\\ \\'Install OS \\[$DIST\\ $VER\\]\\'\" /tmp/grub.new; sed -i '/^#/d' /tmp/grub.new;&#125; [[ -n \"$(grep 'linux.*/\\|kernel.*/' /tmp/grub.new |awk '&#123;print $2&#125;' |tail -n 1 |grep '^/boot/')\" ]] &amp;&amp; Type='InBoot' || Type='NoBoot'; LinuxKernel=\"$(grep 'linux.*/\\|kernel.*/' /tmp/grub.new |awk '&#123;print $1&#125;' |head -n 1)\";[[ -z \"$LinuxKernel\" ]] &amp;&amp; echo \"Error! read grub config! \" &amp;&amp; exit 1;LinuxIMG=\"$(grep 'initrd.*/' /tmp/grub.new |awk '&#123;print $1&#125;' |tail -n 1)\";[ -z \"$LinuxIMG\" ] &amp;&amp; sed -i \"/$LinuxKernel.*\\//a\\\\\\tinitrd\\ \\/\" /tmp/grub.new &amp;&amp; LinuxIMG='initrd'; [[ \"$Type\" == 'InBoot' ]] &amp;&amp; &#123; sed -i \"/$LinuxKernel.*\\//c\\\\\\t$LinuxKernel\\\\t\\/boot\\/linux auto=true hostname=$linuxdists domain= -- quiet\" /tmp/grub.new; sed -i \"/$LinuxIMG.*\\//c\\\\\\t$LinuxIMG\\\\t\\/boot\\/initrd.gz\" /tmp/grub.new;&#125; [[ \"$Type\" == 'NoBoot' ]] &amp;&amp; &#123; sed -i \"/$LinuxKernel.*\\//c\\\\\\t$LinuxKernel\\\\t\\/linux auto=true hostname=$linuxdists domain= -- quiet\" /tmp/grub.new; sed -i \"/$LinuxIMG.*\\//c\\\\\\t$LinuxIMG\\\\t\\/initrd.gz\" /tmp/grub.new;&#125; sed -i '$a\\\\n' /tmp/grub.new; [[ \"$inVNC\" == 'n' ]] &amp;&amp; &#123;GRUBPATCH='0'; [ -f '/etc/network/interfaces' -o -d '/etc/sysconfig/network-scripts' ] || &#123; echo \"Error, Not found interfaces config.\"; exit 1;&#125; INSERTGRUB=\"$(awk '/menuentry /&#123;print NR&#125;' $GRUBDIR/$GRUBFILE|head -n 1)\"sed -i ''$&#123;INSERTGRUB&#125;'i\\\\n' $GRUBDIR/$GRUBFILE;sed -i ''$&#123;INSERTGRUB&#125;'r /tmp/grub.new' $GRUBDIR/$GRUBFILE;[[ -f $GRUBDIR/grubenv ]] &amp;&amp; sed -i 's/saved_entry/#saved_entry/g' $GRUBDIR/grubenv; [[ -d /boot/tmp ]] &amp;&amp; rm -rf /boot/tmp;mkdir -p /boot/tmp;cd /boot/tmp;gzip -d &lt; ../initrd.gz | cpio --extract --verbose --make-directories --no-absolute-filenames &gt;&gt;/dev/null 2&gt;&amp;1 cat &gt;/boot/tmp/preseed.cfg&lt;&lt;EOFd-i debian-installer/locale string en_USd-i console-setup/layoutcode string us d-i keyboard-configuration/xkb-keymap string us d-i netcfg/choose_interface select auto d-i netcfg/disable_autoconfig boolean trued-i netcfg/dhcp_failed noted-i netcfg/dhcp_options select Configure network manuallyd-i netcfg/get_ipaddress string $IPv4d-i netcfg/get_netmask string $MASKd-i netcfg/get_gateway string $GATEd-i netcfg/get_nameservers string 8.8.8.8d-i netcfg/no_default_route boolean trued-i netcfg/confirm_static boolean true d-i hw-detect/load_firmware boolean true d-i mirror/country string manuald-i mirror/http/hostname string $DebianMirrord-i mirror/http/directory string $DebianMirrorDirectoryd-i mirror/http/proxy string d-i passwd/root-login boolean tured-i passwd/make-user boolean falsed-i passwd/root-password password $myPASSWORDd-i passwd/root-password-again password $myPASSWORDd-i user-setup/allow-password-weak boolean trued-i user-setup/encrypt-home boolean false d-i clock-setup/utc boolean trued-i time/zone string US/Easternd-i clock-setup/ntp boolean true d-i preseed/early_command string anna-install libfuse2-udeb fuse-udeb ntfs-3g-udeb fuse-modules-3.16.0-4-amd64-did-i partman/early_command string \\debconf-set partman-auto/disk \"\\$(list-devices disk |head -n1)\"; \\wget -qO- '$DDURL' |gunzip -dc |/bin/dd of=\\$(list-devices disk |head -n1); \\mount.ntfs-3g \\$(list-devices partition |head -n1) /mnt; \\cd '/mnt/ProgramData/Microsoft/Windows/Start Menu/Programs'; \\cd Start* || cd start*; \\cp -f '/net.bat' './net.bat'; \\/sbin/reboot; \\debconf-set grub-installer/bootdev string \"\\$(list-devices disk |head -n1)\"; \\umount /media || true; \\ d-i partman/mount_style select uuidd-i partman-auto/init_automatically_partition select Guided - use entire diskd-i partman-auto/method string regulard-i partman-lvm/device_remove_lvm boolean trued-i partman-md/device_remove_md boolean trued-i partman-auto/choose_recipe select atomicd-i partman-partitioning/confirm_write_new_label boolean trued-i partman/choose_partition select finishd-i partman-lvm/confirm boolean trued-i partman-lvm/confirm_nooverwrite boolean trued-i partman/confirm boolean trued-i partman/confirm_nooverwrite boolean true d-i debian-installer/allow_unauthenticated boolean true tasksel tasksel/first multiselect minimald-i pkgsel/update-policy select noned-i pkgsel/include string openssh-serverd-i pkgsel/upgrade select none popularity-contest popularity-contest/participate boolean false d-i grub-installer/only_debian boolean trued-i grub-installer/bootdev string defaultd-i finish-install/reboot_in_progress noted-i debian-installer/exit/reboot boolean trued-i preseed/late_command string \\sed -ri 's/^#?PermitRootLogin.*/PermitRootLogin yes/g' /target/etc/ssh/sshd_config; \\sed -ri 's/^#?PasswordAuthentication.*/PasswordAuthentication yes/g' /target/etc/ssh/sshd_config;EOF [[ \"$setNet\" == '0' ]] &amp;&amp; [[ \"$AutoNet\" == '1' ]] &amp;&amp; &#123; sed -i '/netcfg\\/disable_autoconfig/d' /boot/tmp/preseed.cfg sed -i '/netcfg\\/dhcp_options/d' /boot/tmp/preseed.cfg sed -i '/netcfg\\/get_.*/d' /boot/tmp/preseed.cfg sed -i '/netcfg\\/confirm_static/d' /boot/tmp/preseed.cfg&#125; [[ \"$DIST\" == 'trusty' ]] &amp;&amp; GRUBPATCH='1'[[ \"$DIST\" == 'wily' ]] &amp;&amp; GRUBPATCH='1' [[ \"$GRUBPATCH\" == '1' ]] &amp;&amp; &#123; sed -i 's/^d-i\\ grub-installer\\/bootdev\\ string\\ default//g' /boot/tmp/preseed.cfg&#125;[[ \"$GRUBPATCH\" == '0' ]] &amp;&amp; &#123; sed -i 's/debconf-set\\ grub-installer\\/bootdev.*\\\"\\;//g' /boot/tmp/preseed.cfg&#125;[[ \"$DIST\" == 'xenial' ]] &amp;&amp; &#123; sed -i 's/^d-i\\ clock-setup\\/ntp\\ boolean\\ true/d-i\\ clock-setup\\/ntp\\ boolean\\ false/g' /boot/tmp/preseed.cfg&#125; [[ \"$linuxdists\" == 'debian' ]] &amp;&amp; &#123; sed -i '/user-setup\\/allow-password-weak/d' /boot/tmp/preseed.cfg sed -i '/user-setup\\/encrypt-home/d' /boot/tmp/preseed.cfg sed -i '/pkgsel\\/update-policy/d' /boot/tmp/preseed.cfg sed -i 's/umount\\ \\/media.*true\\;\\ //g' /boot/tmp/preseed.cfg&#125; [[ \"$ddMode\" == '1' ]] &amp;&amp; &#123;WinDHCP()&#123; echo -ne \"@ECHO OFF\\r\\ncd\\040\\057d\\040\\042\\045ProgramData\\045\\057Microsoft\\057Windows\\057Start\\040Menu\\057Programs\\057Startup\\042\\r\\ndel\\040\\057f\\040\\057q\\040net\\056bat\\r\\n\\r\\n\" &gt;'/boot/tmp/net.tmp';&#125;WinNoDHCP()&#123; echo -ne \"@ECHO OFF\\r\\ncd\\056\\076\\045windir\\045\\GetAdmin\\r\\nif\\040exist\\040\\045windir\\045\\GetAdmin\\040\\050del\\040\\057f\\040\\057q\\040\\042\\045windir\\045\\GetAdmin\\042\\051\\040else\\040\\050\\r\\necho\\040CreateObject^\\050\\042Shell\\056Application\\042^\\051\\056ShellExecute\\040\\042\\045~s0\\042\\054\\040\\042\\045\\052\\042\\054\\040\\042\\042\\054\\040\\042runas\\042\\054\\040\\061\\040\\076\\076\\040\\042\\045temp\\045\\Admin\\056vbs\\042\\r\\n\\042\\045temp\\045\\Admin\\056vbs\\042\\r\\ndel\\040\\057f\\040\\057q\\040\\042\\045temp\\045\\Admin\\056vbs\\042\\r\\nexit\\040\\057b\\040\\062\\051\\r\\nfor\\040\\057f\\040\\042tokens=\\063\\052\\042\\040\\045\\045i\\040in\\040\\050\\047netsh\\040interface\\040show\\040interface\\040^|more\\040+3\\040^|findstr\\040\\057R\\040\\042\\u672c\\u5730\\056\\052\\040\\u4ee5\\u592a\\056\\052\\040Local\\056\\052\\040Ethernet\\042\\047\\051\\040do\\040\\050set\\040EthName=\\045\\045j\\051\\r\\nnetsh\\040-c\\040interface\\040ip\\040set\\040address\\040name=\\042\\045EthName\\045\\042\\040source=static\\040address=$IPv4\\040mask=$MASK\\040gateway=$GATE\\r\\nnetsh\\040-c\\040interface\\040ip\\040add\\040dnsservers\\040name=\\042\\045EthName\\045\\042\\040address=\\070\\056\\070\\056\\070\\056\\070\\040index=1\\040validate=no\\r\\nnetsh\\040-c\\040interface\\040ip\\040add\\040dnsservers\\040name=\\042\\045EthName\\045\\042\\040address=\\070\\056\\070\\056\\064\\056\\064\\040index=2\\040validate=no\\r\\ncd\\040\\057d\\040\\042\\045ProgramData\\045\\057Microsoft\\057Windows\\057Start\\040Menu\\057Programs\\057Startup\\042\\r\\ndel\\040\\057f\\040\\057q\\040net\\056bat\\r\\n\\r\\n\" &gt;'/boot/tmp/net.tmp';&#125; [[ \"$setNet\" == '1' ]] &amp;&amp; WinNoDHCP; [[ \"$setNet\" == '0' ]] &amp;&amp; &#123; [[ \"$AutoNet\" -eq '1' ]] &amp;&amp; WinDHCP; [[ \"$AutoNet\" -eq '0' ]] &amp;&amp; WinNoDHCP; &#125; iconv -f 'UTF-8' -t 'GBK' '/boot/tmp/net.tmp' -o '/boot/tmp/net.bat' rm -rf '/boot/tmp/net.tmp' echo \"$DDURL\" |grep -q '^https://' [[ $? -eq '0' ]] &amp;&amp; &#123; echo -ne '\\nAdd ssl support...\\n' [[ -n $SSL_SUPPORT ]] &amp;&amp; &#123; wget --no-check-certificate -qO- \"$SSL_SUPPORT\" |tar -x [[ ! -f /boot/tmp/usr/bin/wget ]] &amp;&amp; echo 'Error! SSL_SUPPORT.' &amp;&amp; exit 1; sed -i 's/wget\\ -qO-/\\/usr\\/bin\\/wget\\ --no-check-certificate\\ --retry-connrefused\\ --tries=7\\ --continue\\ -qO-/g' /boot/tmp/preseed.cfg [[ $? -eq '0' ]] &amp;&amp; echo -ne 'Success! \\n\\n' &#125; || &#123; echo -ne 'Not ssl support package! \\n\\n'; exit 1; &#125; &#125;&#125; [[ \"$ddMode\" == '0' ]] &amp;&amp; &#123; sed -i '/anna-install/d' /boot/tmp/preseed.cfg sed -i 's/wget.*\\/sbin\\/reboot\\;\\ //g' /boot/tmp/preseed.cfg&#125;[[ \"$INCFW\" == '1' ]] &amp;&amp; [[ \"$linuxdists\" == 'debian' ]] &amp;&amp; [[ -f '/boot/firmware.cpio.gz' ]] &amp;&amp; &#123; gzip -d &lt; ../firmware.cpio.gz | cpio --extract --verbose --make-directories --no-absolute-filenames &gt;&gt;/dev/null 2&gt;&amp;1&#125;rm -rf ../initrd.gz;find . | cpio -H newc --create --verbose | gzip -9 &gt; ../initrd.gz;rm -rf /boot/tmp;&#125; [[ \"$inVNC\" == 'y' ]] &amp;&amp; &#123; sed -i '$i\\\\n' $GRUBDIR/$GRUBFILE sed -i '$r /tmp/grub.new' $GRUBDIR/$GRUBFILE echo -e \"\\n\\033[33m\\033[04mIt will reboot! \\nPlease look at VNC! \\nSelect\\033[0m\\033[32m Install OS [$DIST $VER] \\033[33m\\033[4mto install system.\\033[04m\\n\\n\\033[31m\\033[04mThere is some information for you.\\nDO NOT CLOSE THE WINDOW! \\033[0m\\n\" echo -e \"\\033[35mIPv4\\t\\tNETMASK\\t\\tGATEWAY\\033[0m\" echo -e \"\\033[36m\\033[04m$IPv4\\033[0m\\t\\033[36m\\033[04m$MASK\\033[0m\\t\\033[36m\\033[04m$GATE\\033[0m\\n\\n\" read -n 1 -p \"Press Enter to reboot...\" INP [[ \"$INP\" != '' ]] &amp;&amp; echo -ne '\\b \\n\\n';&#125; chown root:root $GRUBDIR/$GRUBFILEchmod 444 $GRUBDIR/$GRUBFILE sleep 3 &amp;&amp; reboot &gt;/dev/null 2&gt;&amp;1 本教程转自萌咖大佬官网点我访问","path":"2018/04/23/linuxshellwindows/","date":"04-23","excerpt":"转载 通用无限制在 Linux VPS 上一键全自动 dd 安装 Windows 系统作者:萌咖大佬","preview":"http://7xi7my.com1.z0.glb.clouddn.com/pre808.jpg"},{"title":"Debian/Ubuntu/CentOS 网络安装/重装系统/纯净安装 一键脚本","text":"转载 Debian/Ubuntu/CentOS 网络安装/重装系统/纯净安装 一键脚本作者:萌咖大佬 本教程转自萌咖大佬官网点我访问 背景:适用于由GRUB引导的CentOS,Ubuntu,Debian系统.使用官方发行版去掉模板预装的软件.同时也可以解决内核版本与软件不兼容的问题。只要有root权限,还您一个纯净的系统。 注意: 全自动安装默认root密码:Vicer,安装完成后请立即更改密码. 能够全自动重装Debian/Ubuntu/CentOS等系统. 同时提供dd安装镜像功能,例如: 全自动无救援dd安装windows系统 全自动安装CentOS时默认提供VNC功能,可使用VNC Viewer查看进度, VNC端口为1或者5901,可自行尝试连接.(成功后VNC功能会消失.) 目前CentOS系统只支持任意版本重装为 CentOS 6.9 及以下版本.特别注意:OpenVZ构架不适用. 更新: [2018.04.17] 修复对grub.conf抓取识别的问题. [2018.04.06] 优化正则表达式. 丢弃对grep -P的依赖. [2018.04.03] 合并Debian/Ubuntu/CentOS/dd安装镜像功能. 使用最少依赖原则. 优化部分流程. 修复一些已知BUG. 依赖包:1234567891011#二进制文件 Debian/Ubuntu RedHat/CentOSiconv [libc-bin] [glibc-common]xz [xz-utils] [xz]awk [gawk] [gawk]sed [sed] [sed]file [file] [file]grep [grep] [grep]openssl [openssl] [openssl]cpio [cpio] [cpio]gzip [gzip] [gzip]cat,cut.. [coreutils] [coreutils] 确保安装了所需软件:1234#Debian/Ubuntu:apt-get install -y xz-utils openssl gawk file#RedHat/CentOS:yum install -y xz openssl gawk file 如果出现了错误,请运行:1234#Debian/Ubuntu:apt-get update#RedHat/CentOS:yum update 一键下载及使用:wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' && chmod a+x InstallNET.sh123456789101112131415`````` bashUsage: bash InstallNET.sh -d/--debian [dist-name] -u/--ubuntu [dist-name] -c/--centos [dist-version] -v/--ver [32/i386|64/amd64] --ip-addr/--ip-gate/--ip-mask -apt/-yum/--mirror -dd/--image -a/-m# dist-name: 发行版本代号# dist-version: 发行版本号# -apt/-yum/--mirror : 使用定义镜像# -a/-m : 询问是否能进入VNC自行操作. -a 为不提示(一般用于全自动安装), -m 为提示. 使用示例:12345678910111213141516#使用默认镜像全自动安装bash InstallNET.sh -d 8 -v 64 -a#使用自定义镜像全自动安装bash InstallNET.sh -c 6.9 -v 64 -a --mirror 'http://mirror.centos.org/centos'# 以下示例中,将X.X.X.X替换为自己的网络参数.# --ip-addr :IP Address/IP地址# --ip-gate :Gateway /网关# --ip-mask :Netmask /子网掩码#使用自定义镜像自定义网络参数全自动安装#bash InstallNET.sh -u 16.04 -v 64 -a --ip-addr x.x.x.x --ip-gate x.x.x.x --ip-mask x.x.x.x --mirror 'http://archive.ubuntu.com/ubuntu'#使用自定义网络参数全自动dd方式安装#bash InstallNET.sh --ip-addr x.x.x.x --ip-gate x.x.x.x --ip-mask x.x.x.x -dd 'https://moeclub.org/get-win7embx86-auto'#使用自定义网络参数全自动dd方式安装存储在谷歌网盘中的镜像(调用文件ID的方式)#bash InstallNET.sh --ip-addr x.x.x.x --ip-gate x.x.x.x --ip-mask x.x.x.x -dd \"$(echo \"11fr_LcgY_qSEDbWvBel0S0fjYAX_lKL0\" |xargs -n1 bash &lt;(wget --no-check-certificate -qO- 'https://moeclub.org/get-gdlink'))\"#使用自定义网络参数全自动dd方式安装存储在谷歌网盘中的镜像#bash InstallNET.sh --ip-addr x.x.x.x --ip-gate x.x.x.x --ip-mask x.x.x.x -dd \"$(echo \"https://drive.google.com/open?id=11fr_LcgY_qSEDbWvBel0S0fjYAX_lKL0\" |xargs -n1 bash &lt;(wget --no-check-certificate -qO- 'https://moeclub.org/get-gdlink'))\" 一些提示:1.在dd安装系统镜像时:在你的机器上全新安装,如果你有VNC,可以看到全部过程.在dd安装镜像的过程中,不会走进度条(进度条一直显示为0%).完成后将会自动重启.分区界面标题一般显示为: “Starting up the partitioner“使用谷歌网盘中储存的镜像:[无限制大小] 获取谷歌网盘文件临时直接下载链接2. 在全自动安装CentOS时:如果看到 “Starting graphical installation” 或者类似表达,则表示正在安装.正常情况下只需要耐心等待安装完成即可.如果需要查看进度,使用VNC Viewer(或者其他VNC连接工具)连接提示中的IP地址:端口进行连接.(端口一般为1或者5901) 预览bin/bash## It can reinstall Debian, Ubuntu, CentOS system with network.## Suitable for using by GRUB.## Default root password: Vicer## Blog: https://moeclub.org## Written By Vicerexport tmpVER=''export tmpDIST=''export tmpURL=''export tmpWORD=''export tmpMirror=''export tmpSSL=''export tmpINS=''export tmpFW=''export ipAddr=''export ipMask=''export ipGate=''export linuxdists=''export ddMode='0'export setNet='0'export isMirror='0'export FindDists='0'export SpikCheckDIST='0'export UNKNOWHW='0'export UNVER='6.4'while [[ $# -ge 1 ]]; do case $1 in -v|--ver) shift tmpVER=\"$1\" shift ;; -d|--debian) shift linuxdists='debian' tmpDIST=\"$1\" shift ;; -u|--ubuntu) shift linuxdists='ubuntu' tmpDIST=\"$1\" shift ;; -c|--centos) shift linuxdists='centos' tmpDIST=\"$1\" shift ;; -dd|--image) shift ddMode='1' tmpURL=\"$1\" shift ;; -p|--password) shift tmpWORD=\"$1\" shift ;; --ip-addr) shift ipAddr=\"$1\" shift ;; --ip-mask) shift ipMask=\"$1\" shift ;; --ip-gate) shift ipGate=\"$1\" shift ;; -a|--auto) shift tmpINS='auto' ;; -m|--manual) shift tmpINS='manual' ;; -apt|-yum|--mirror) shift isMirror='1' tmpMirror=\"$1\" shift ;; -ssl) shift tmpSSL=\"$1\" shift ;; --firmware) shift tmpFW='1' ;; *) if [[ \"$1\" != 'error' ]]; then echo -ne \"\\nInvaild option: '$1'\\n\\n\"; fi echo -ne \" Usage:\\n\\tbash DebianNET.sh\\t-d/--debian [\\033[33m\\033[04mdists-name\\033[0m]\\n\\t\\t\\t\\t-u/--ubuntu [\\033[04mdists-name\\033[0m]\\n\\t\\t\\t\\t-c/--centos [\\033[33m\\033[04mdists-verison\\033[0m]\\n\\t\\t\\t\\t-v/--ver [32/\\033[33m\\033[04mi386\\033[0m|64/amd64]\\n\\t\\t\\t\\t--ip-addr/--ip-gate/--ip-mask\\n\\t\\t\\t\\t-apt/-yum/--mirror\\n\\t\\t\\t\\t-dd/--image\\n\\t\\t\\t\\t-a/--auto\\n\\t\\t\\t\\t-m/--manual\\n\" exit 1; ;; esac done[[ \"$EUID\" -ne '0' ]] &amp;&amp; echo \"Error:This script must be run as root!\" &amp;&amp; exit 1;function CheckDependence()&#123;FullDependence='0';for BIN_DEP in `echo \"$1\" |sed 's/,/\\n/g'` do if [[ -n \"$BIN_DEP\" ]]; then Founded='0'; for BIN_PATH in `echo \"$PATH\" |sed 's/:/\\n/g'` do ls $BIN_PATH/$BIN_DEP &gt;/dev/null 2&gt;&amp;1; if [ $? == '0' ]; then Founded='1'; break; fi done if [ \"$Founded\" == '1' ]; then echo -en \"[\\033[32mok\\033[0m]\\t\"; else FullDependence='1'; echo -en \"[\\033[31mNot Install\\033[0m]\"; fi echo -en \"\\t$BIN_DEP\\n\"; fi doneif [ \"$FullDependence\" == '1' ]; then echo -ne \"\\n\\033[31mError! \\033[0mPlease use '\\033[33mapt-get\\033[0m' or '\\033[33myum\\033[0m' install it.\\n\\n\\n\" exit 1;fi&#125;if [[ -z \"$linuxdists\" ]]; then linuxdists='debian';ficlear &amp;&amp; echo -e \"\\n\\033[36m# Check Dependence\\033[0m\\n\"if [[ \"$ddMode\" == '1' ]]; then CheckDependence iconv; linuxdists='debian'; tmpDIST='jessie'; tmpVER='amd64'; tmpINS='auto';fiif [[ \"$linuxdists\" == 'debian' ]] || [[ \"$linuxdists\" == 'ubuntu' ]]; then CheckDependence wget,awk,grep,sed,cut,cat,cpio,gzip,find,dirname,basename;elif [[ \"$linuxdists\" == 'centos' ]]; then CheckDependence wget,awk,grep,sed,cut,cat,cpio,gzip,find,dirname,basename,file,xz;fiif [[ -n \"$tmpWORD\" ]]; then CheckDependence openssl;fi[[ -f '/boot/grub/grub.cfg' ]] &amp;&amp; GRUBOLD='0' &amp;&amp; GRUBDIR='/boot/grub' &amp;&amp; GRUBFILE='grub.cfg';[[ -z \"$GRUBDIR\" ]] &amp;&amp; [[ -f '/boot/grub2/grub.cfg' ]] &amp;&amp; GRUBOLD='0' &amp;&amp; GRUBDIR='/boot/grub2' &amp;&amp; GRUBFILE='grub.cfg';[[ -z \"$GRUBDIR\" ]] &amp;&amp; [[ -f '/boot/grub/grub.conf' ]] &amp;&amp; GRUBOLD='1' &amp;&amp; GRUBDIR='/boot/grub' &amp;&amp; GRUBFILE='grub.conf';[ -z \"$GRUBDIR\" -o -z \"$GRUBFILE\" ] &amp;&amp; echo -ne \"Error! \\nNot Found grub path.\\n\" &amp;&amp; exit 1;if [[ \"$isMirror\" == '1' ]]; then if [[ -n \"$tmpMirror\" ]]; then TMPMirrorHost=\"$(echo -n \"$tmpMirror\" |grep -Eo '.*\\.(\\w+)')\"; echo \"$TMPMirrorHost\" |grep -q '://'; if [[ $? == '0' ]]; then MirrorHost=\"$(echo \"$TMPMirrorHost\" |awk -F'://' '&#123;print $2&#125;')\"; else echo -en \"\\n\\033[31mInvaild Mirror! \\033[0m\\n\"; [[ \"$linuxdists\" == 'debian' ]] &amp;&amp; echo -en \"\\033[33mexample:\\033[0m http://httpredir.debian.org/debian\\n\\n\"; [[ \"$linuxdists\" == 'ubuntu' ]] &amp;&amp; echo -en \"\\033[33mexample:\\033[0m http://archive.ubuntu.com/ubuntu\\n\\n\"; [[ \"$linuxdists\" == 'centos' ]] &amp;&amp; echo -en \"\\033[33mexample:\\033[0m http://mirror.centos.org/centos\\n\\n\"; exit 1 fi if [[ -n \"$MirrorHost\" ]]; then MirrorFolder=\"$(echo -n \"$tmpMirror\" |awk -F''$&#123;MirrorHost&#125;'' '&#123;print $2&#125;' |sed 's/\\/$//g')\"; if [[ -z \"$MirrorFolder\" ]]; then [[ \"$linuxdists\" == 'debian' ]] &amp;&amp; MirrorFolder='/debian'; [[ \"$linuxdists\" == 'ubuntu' ]] &amp;&amp; MirrorFolder='/ubuntu'; [[ \"$linuxdists\" == 'centos' ]] &amp;&amp; MirrorFolder='/centos'; fi DISTMirror=\"$&#123;MirrorHost&#125;$&#123;MirrorFolder&#125;\"; fi fifiif [[ -z \"$DISTMirror\" ]]; then [[ \"$linuxdists\" == 'debian' ]] &amp;&amp; MirrorHost='httpredir.debian.org' &amp;&amp; MirrorFolder='/debian' &amp;&amp; DISTMirror=\"$&#123;MirrorHost&#125;$&#123;MirrorFolder&#125;\"; [[ \"$linuxdists\" == 'ubuntu' ]] &amp;&amp; MirrorHost='archive.ubuntu.com' &amp;&amp; MirrorFolder='/ubuntu' &amp;&amp; DISTMirror=\"$&#123;MirrorHost&#125;$&#123;MirrorFolder&#125;\"; [[ \"$linuxdists\" == 'centos' ]] &amp;&amp; DISTMirror='vault.centos.org';fiif [[ -n \"$tmpVER\" ]]; then tmpVER=\"$(echo \"$tmpVER\" |sed -r 's/(.*)/\\L\\1/')\"; if [[ \"$tmpVER\" == '32' ]] || [[ \"$tmpVER\" == 'i386' ]] || [[ \"$tmpVER\" == 'x86' ]]; then VER='i386'; fi if [[ \"$tmpVER\" == '64' ]] || [[ \"$tmpVER\" == 'amd64' ]] || [[ \"$tmpVER\" == 'x86_64' ]] || [[ \"$tmpVER\" == 'x64' ]]; then if [[ \"$linuxdists\" == 'debian' ]] || [[ \"$linuxdists\" == 'ubuntu' ]]; then VER='amd64'; elif [[ \"$linuxdists\" == 'centos' ]]; then VER='x86_64'; fi fifiif [[ -z \"$VER\" ]]; then VER='i386';fiif [[ -z \"$tmpDIST\" ]]; then [[ \"$linuxdists\" == 'debian' ]] &amp;&amp; DIST='jessie'; [[ \"$linuxdists\" == 'ubuntu' ]] &amp;&amp; DIST='xenial'; [[ \"$linuxdists\" == 'centos' ]] &amp;&amp; DIST='6.8';fiif [[ -z \"$DIST\" ]]; then if [[ \"$linuxdists\" == 'debian' ]]; then SpikCheckDIST='0' DIST=\"$(echo \"$tmpDIST\" |sed -r 's/(.*)/\\L\\1/')\"; echo \"$DIST\" |grep -q '[0-9]'; [[ $? -eq '0' ]] &amp;&amp; &#123; isDigital=\"$(echo \"$DIST\" |grep -o '[\\.0-9]\\&#123;1,\\&#125;' |sed -n '1h;1!H;$g;s/\\n//g;$p' |cut -d'.' -f1)\"; [[ -n $isDigital ]] &amp;&amp; &#123; [[ \"$isDigital\" == '7' ]] &amp;&amp; DIST='wheezy'; [[ \"$isDigital\" == '8' ]] &amp;&amp; DIST='jessie'; [[ \"$isDigital\" == '9' ]] &amp;&amp; DIST='stretch'; [[ \"$isDigital\" == '10' ]] &amp;&amp; DIST='buster'; &#125; &#125; fi if [[ \"$linuxdists\" == 'ubuntu' ]]; then SpikCheckDIST='0' DIST=\"$(echo \"$tmpDIST\" |sed -r 's/(.*)/\\L\\1/')\"; echo \"$DIST\" |grep -q '[0-9]'; [[ $? -eq '0' ]] &amp;&amp; &#123; isDigital=\"$(echo \"$DIST\" |grep -o '[\\.0-9]\\&#123;1,\\&#125;' |sed -n '1h;1!H;$g;s/\\n//g;$p')\"; [[ -n $isDigital ]] &amp;&amp; &#123; [[ \"$isDigital\" == '12.04' ]] &amp;&amp; DIST='precise'; [[ \"$isDigital\" == '14.04' ]] &amp;&amp; DIST='trusty'; [[ \"$isDigital\" == '16.04' ]] &amp;&amp; DIST='xenial'; [[ \"$isDigital\" == '18.04' ]] &amp;&amp; DIST='bionic'; &#125; &#125; fi if [[ \"$linuxdists\" == 'centos' ]]; then SpikCheckDIST='1' DISTCheck=\"$(echo \"$tmpDIST\" |grep -o '[\\.0-9]\\&#123;1,\\&#125;')\"; ListDIST=\"$(wget --no-check-certificate -qO- \"http://$DISTMirror/dir_sizes\" |cut -f2 |grep '^[0-9]')\" DIST=\"$(echo \"$ListDIST\" |grep \"^$DISTCheck\")\" [[ -z \"$DIST\" ]] &amp;&amp; &#123; echo -ne '\\nThe dists version not found in this mirror, Please check it! \\n\\n' bash $0 error; exit 1; &#125; wget --no-check-certificate -qO- \"http://$DISTMirror/$DIST/os/$VER/.treeinfo\" |grep -q 'general'; [[ $? != '0' ]] &amp;&amp; &#123; echo -ne \"\\nThe version not found in this mirror, Please change mirror try again! \\n\\n\"; exit 1; &#125; fifi if [[ \"$SpikCheckDIST\" == '0' ]]; then DistsList=\"$(wget --no-check-certificate -qO- \"http://$DISTMirror/dists/\" |grep -o 'href=.*/\"' |cut -d'\"' -f2 |sed '/-\\|old\\|Debian\\|experimental\\|stable\\|test\\|sid\\|devel/d' |grep '^[^/]' |sed -n '1h;1!H;$g;s/\\n//g;s/\\//\\;/g;$p')\"; for CheckDEB in `echo \"$DistsList\" |sed 's/;/\\n/g'` do [[ \"$CheckDEB\" == \"$DIST\" ]] &amp;&amp; FindDists='1'; [[ \"$FindDists\" == '1' ]] &amp;&amp; break; done [[ \"$FindDists\" == '0' ]] &amp;&amp; &#123; echo -ne '\\nThe dists version not found, Please check it! \\n\\n' bash $0 error; exit 1; &#125;fi [[ \"$ddMode\" == '1' ]] &amp;&amp; &#123; export SSL_SUPPORT='https://moeclub.org/get-wget_udeb_amd64'; if [[ -n \"$tmpURL\" ]]; then DDURL=\"$tmpURL\" echo \"$DDURL\" |grep -q '^http://\\|^ftp://\\|^https://'; [[ $? -ne '0' ]] &amp;&amp; echo 'Please input vaild URL,Only support http://, ftp:// and https:// !' &amp;&amp; exit 1; [[ -n \"$tmpSSL\" ]] &amp;&amp; SSL_SUPPORT=\"$tmpSSL\"; else echo 'Please input vaild image URL! '; exit 1; fi&#125; [[ -n \"$tmpINS\" ]] &amp;&amp; &#123; [[ \"$tmpINS\" == 'auto' ]] &amp;&amp; inVNC='n'; [[ \"$tmpINS\" == 'manual' ]] &amp;&amp; inVNC='y';&#125; [ -n \"$ipAddr\" ] &amp;&amp; [ -n \"$ipMask\" ] &amp;&amp; [ -n \"$ipGate\" ] &amp;&amp; setNet='1';[[ -n \"$tmpWORD\" ]] &amp;&amp; myPASSWORD=\"$(openssl passwd -1 \"$tmpWORD\")\";[[ -z \"$myPASSWORD\" ]] &amp;&amp; myPASSWORD='$1$0shYGfBd$8v189JOozDO1jPqPO645e1';[[ -n \"$tmpFW\" ]] &amp;&amp; INCFW=\"$tmpFW\";[[ -z \"$INCFW\" ]] &amp;&amp; INCFW='0'; clear &amp;&amp; echo -e \"\\n\\033[36m# Install\\033[0m\\n\" ASKVNC()&#123; inVNC='y'; [[ \"$ddMode\" == '0' ]] &amp;&amp; &#123; echo -ne \"\\033[34mCan you login VNC?\\033[0m\\e[33m[\\e[32my\\e[33m/n]\\e[0m \" read tmpinVNC [[ -n \"$inVNCtmp\" ]] &amp;&amp; inVNC=\"$tmpinVNC\" &#125; [ \"$inVNC\" == 'y' -o \"$inVNC\" == 'Y' ] &amp;&amp; inVNC='y'; [ \"$inVNC\" == 'n' -o \"$inVNC\" == 'N' ] &amp;&amp; inVNC='n';&#125; [ \"$inVNC\" == 'y' -o \"$inVNC\" == 'n' ] || ASKVNC;[[ \"$linuxdists\" == 'debian' ]] &amp;&amp; LinuxName='Debian';[[ \"$linuxdists\" == 'ubuntu' ]] &amp;&amp; LinuxName='Ubuntu';[[ \"$linuxdists\" == 'centos' ]] &amp;&amp; LinuxName='CentOS';[[ \"$ddMode\" == '0' ]] &amp;&amp; &#123; [[ \"$inVNC\" == 'y' ]] &amp;&amp; echo -e \"\\033[34mManual Mode\\033[0m insatll \\033[33m$LinuxName\\033[0m [\\033[33m$DIST\\033[0m] [\\033[33m$VER\\033[0m] in VNC. \" [[ \"$inVNC\" == 'n' ]] &amp;&amp; echo -e \"\\033[34mAuto Mode\\033[0m insatll \\033[33m$LinuxName\\033[0m [\\033[33m$DIST\\033[0m] [\\033[33m$VER\\033[0m]. \"&#125;[[ \"$ddMode\" == '1' ]] &amp;&amp; &#123; echo -ne \"\\033[34mAuto Mode\\033[0m insatll \\033[33mWindows\\033[0m\\n[\\033[33m$DDURL\\033[0m]\\n\"&#125; if [[ \"$linuxdists\" == 'centos' ]]; then if [[ \"$DIST\" != \"$UNVER\" ]]; then awk 'BEGIN&#123;print '$&#123;UNVER&#125;'-'$&#123;DIST&#125;'&#125;' |grep -q '^-' if [ $? != '0' ]; then UNKNOWHW='1'; echo -en \"\\033[33mThe version lower then \\033[31m$UNVER\\033[33m may not support in auto mode! \\033[0m\\n\"; if [[ \"$inVNC\" == 'n' ]]; then echo -en \"\\033[35mYou can connect VNC with \\033[32mPublic IP\\033[35m and port \\033[32m1\\033[35m/\\033[32m5901\\033[35m in vnc viewer.\\033[0m\\n\" read -n 1 -p \"Press Enter to continue...\" INP [[ \"$INP\" != '' ]] &amp;&amp; echo -ne '\\b \\n\\n'; fi fi awk 'BEGIN&#123;print '$&#123;UNVER&#125;'-'$&#123;DIST&#125;'+0.59&#125;' |grep -q '^-' if [ $? == '0' ]; then echo -en \"\\n\\033[31mThe version higher then \\033[33m6.9 \\033[31mis not support in current! \\033[0m\\n\\n\" exit 1; fi fifi echo -e \"\\n[\\033[33m$LinuxName\\033[0m] [\\033[33m$DIST\\033[0m] [\\033[33m$VER\\033[0m] Downloading...\" [[ -z \"$DISTMirror\" ]] &amp;&amp; echo -ne \"\\033[31mError! \\033[0mInvaild mirror! \\n\" &amp;&amp; exit 1 if [[ \"$linuxdists\" == 'debian' ]] || [[ \"$linuxdists\" == 'ubuntu' ]]; thenwget --no-check-certificate -qO '/boot/initrd.img' \"http://$DISTMirror/dists/$DIST/main/installer-$VER/current/images/netboot/$linuxdists-installer/$VER/initrd.gz\"[[ $? -ne '0' ]] &amp;&amp; echo -ne \"\\033[31mError! \\033[0mDownload 'initrd.img' for \\033[33m$linuxdists\\033[0m failed! \\n\" &amp;&amp; exit 1wget --no-check-certificate -qO '/boot/vmlinuz' \"http://$DISTMirror/dists/$DIST/main/installer-$VER/current/images/netboot/$linuxdists-installer/$VER/linux\"[[ $? -ne '0' ]] &amp;&amp; echo -ne \"\\033[31mError! \\033[0mDownload 'vmlinuz' for \\033[33m$linuxdists\\033[0m failed! \\n\" &amp;&amp; exit 1elif [[ \"$linuxdists\" == 'centos' ]]; thenwget --no-check-certificate -qO '/boot/initrd.img' \"http://$DISTMirror/$DIST/os/$VER/isolinux/initrd.img\"[[ $? -ne '0' ]] &amp;&amp; echo -ne \"\\033[31mError! \\033[0mDownload 'initrd.img' for \\033[33m$linuxdists\\033[0m failed! \\n\" &amp;&amp; exit 1wget --no-check-certificate -qO '/boot/vmlinuz' \"http://$DISTMirror/$DIST/os/$VER/isolinux/vmlinuz\"[[ $? -ne '0' ]] &amp;&amp; echo -ne \"\\033[31mError! \\033[0mDownload 'vmlinuz' for \\033[33m$linuxdists\\033[0m failed! \\n\" &amp;&amp; exit 1fiif [[ \"$linuxdists\" == 'debian' ]]; then if [[ \"$INCFW\" == '1' ]]; then wget --no-check-certificate -qO '/boot/firmware.cpio.gz' \"http://cdimage.debian.org/cdimage/unofficial/non-free/firmware/$DIST/current/firmware.cpio.gz\" [[ $? -ne '0' ]] &amp;&amp; echo -ne \"\\033[31mError! \\033[0mDownload 'firmware' for \\033[33m$linuxdists\\033[0m failed! \\n\" &amp;&amp; exit 1 fifi [[ \"$setNet\" == '1' ]] &amp;&amp; &#123; IPv4=\"$ipAddr\"; MASK=\"$ipMask\"; GATE=\"$ipGate\";&#125; || &#123; DEFAULTNET=\"$(ip route show |grep -o 'default via [0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.*' |head -n1 |sed 's/proto.*\\|onlink.*//g' |awk '&#123;print $NF&#125;')\"; [[ -n \"$DEFAULTNET\" ]] &amp;&amp; IPSUB=\"$(ip addr |grep ''$&#123;DEFAULTNET&#125;'' |grep 'global' |grep 'brd' |head -n1 |grep -o '[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;/[0-9]\\&#123;1,2\\&#125;')\"; IPv4=\"$(echo -n \"$IPSUB\" |cut -d'/' -f1)\"; NETSUB=\"$(echo -n \"$IPSUB\" |grep -o '/[0-9]\\&#123;1,2\\&#125;')\"; GATE=\"$(ip route show |grep -o 'default via [0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;' |head -n1 |grep -o '[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;')\"; [[ -n \"$NETSUB\" ]] &amp;&amp; MASK=\"$(echo -n '128.0.0.0/1,192.0.0.0/2,224.0.0.0/3,240.0.0.0/4,248.0.0.0/5,252.0.0.0/6,254.0.0.0/7,255.0.0.0/8,255.128.0.0/9,255.192.0.0/10,255.224.0.0/11,255.240.0.0/12,255.248.0.0/13,255.252.0.0/14,255.254.0.0/15,255.255.0.0/16,255.255.128.0/17,255.255.192.0/18,255.255.224.0/19,255.255.240.0/20,255.255.248.0/21,255.255.252.0/22,255.255.254.0/23,255.255.255.0/24,255.255.255.128/25,255.255.255.192/26,255.255.255.224/27,255.255.255.240/28,255.255.255.248/29,255.255.255.252/30,255.255.255.254/31,255.255.255.255/32' |grep -o '[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;'$&#123;NETSUB&#125;'' |cut -d'/' -f1)\";&#125; [[ -n \"$GATE\" ]] &amp;&amp; [[ -n \"$MASK\" ]] &amp;&amp; [[ -n \"$IPv4\" ]] || &#123;echo \"Not found `ip command`, It will use `route command`.\"ipNum() &#123; local IFS='.'; read ip1 ip2 ip3 ip4 &lt;&lt;&lt;\"$1\"; echo $((ip1*(1&lt;&lt;24)+ip2*(1&lt;&lt;16)+ip3*(1&lt;&lt;8)+ip4));&#125; SelectMax()&#123;ii=0;for IPITEM in `route -n |awk -v OUT=$1 '&#123;print $OUT&#125;' |grep '[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;'` do NumTMP=\"$(ipNum $IPITEM)\"; eval \"arrayNum[$ii]='$NumTMP,$IPITEM'\"; ii=$[$ii+1]; doneecho $&#123;arrayNum[@]&#125; |sed 's/\\s/\\n/g' |sort -n -k 1 -t ',' |tail -n1 |cut -d',' -f2;&#125; [[ -z $IPv4 ]] &amp;&amp; IPv4=\"$(ifconfig |grep 'Bcast' |head -n1 |grep -o '[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;.[0-9]\\&#123;1,3\\&#125;' |head -n1)\";[[ -z $GATE ]] &amp;&amp; GATE=\"$(SelectMax 2)\";[[ -z $MASK ]] &amp;&amp; MASK=\"$(SelectMax 3)\"; [[ -n \"$GATE\" ]] &amp;&amp; [[ -n \"$MASK\" ]] &amp;&amp; [[ -n \"$IPv4\" ]] || &#123; echo \"Error! Not configure network. \"; exit 1;&#125;&#125; [[ \"$setNet\" != '1' ]] &amp;&amp; [[ -f '/etc/network/interfaces' ]] &amp;&amp; &#123; [[ -z \"$(sed -n '/iface.*inet static/p' /etc/network/interfaces)\" ]] &amp;&amp; AutoNet='1' || AutoNet='0'; [[ -d /etc/network/interfaces.d ]] &amp;&amp; &#123; ICFGN=\"$(find /etc/network/interfaces.d -name '*.cfg' |wc -l)\" || ICFGN='0'; [[ \"$ICFGN\" -ne '0' ]] &amp;&amp; &#123; for NetCFG in `ls -1 /etc/network/interfaces.d/*.cfg` do [[ -z \"$(cat $NetCFG | sed -n '/iface.*inet static/p')\" ]] &amp;&amp; AutoNet='1' || AutoNet='0'; [[ \"$AutoNet\" -eq '0' ]] &amp;&amp; break; done &#125; &#125;&#125; [[ \"$setNet\" != '1' ]] &amp;&amp; [[ -d '/etc/sysconfig/network-scripts' ]] &amp;&amp; &#123; ICFGN=\"$(find /etc/sysconfig/network-scripts -name 'ifcfg-*' |grep -v 'lo'|wc -l)\" || ICFGN='0'; [[ \"$ICFGN\" -ne '0' ]] &amp;&amp; &#123; for NetCFG in `ls -1 /etc/sysconfig/network-scripts/ifcfg-* |grep -v 'lo$' |grep -v ':[0-9]\\&#123;1,\\&#125;'` do [[ -n \"$(cat $NetCFG | sed -n '/BOOTPROTO.*[dD][hH][cC][pP]/p')\" ]] &amp;&amp; AutoNet='1' || &#123; AutoNet='0' &amp;&amp; . $NetCFG; [[ -n $NETMASK ]] &amp;&amp; MASK=\"$NETMASK\"; [[ -n $GATEWAY ]] &amp;&amp; GATE=\"$GATEWAY\"; &#125; [[ \"$AutoNet\" -eq '0' ]] &amp;&amp; break; done &#125;&#125; [[ ! -f $GRUBDIR/$GRUBFILE ]] &amp;&amp; echo \"Error! Not Found $GRUBFILE. \" &amp;&amp; exit 1; [[ ! -f $GRUBDIR/$GRUBFILE.old ]] &amp;&amp; [[ -f $GRUBDIR/$GRUBFILE.bak ]] &amp;&amp; mv -f $GRUBDIR/$GRUBFILE.bak $GRUBDIR/$GRUBFILE.old;mv -f $GRUBDIR/$GRUBFILE $GRUBDIR/$GRUBFILE.bak;[[ -f $GRUBDIR/$GRUBFILE.old ]] &amp;&amp; cat $GRUBDIR/$GRUBFILE.old &gt;$GRUBDIR/$GRUBFILE || cat $GRUBDIR/$GRUBFILE.bak &gt;$GRUBDIR/$GRUBFILE; [[ \"$GRUBOLD\" == '0' ]] &amp;&amp; &#123; READGRUB='/tmp/grub.read' cat $GRUBDIR/$GRUBFILE |sed -n '1h;1!H;$g;s/\\n/%%%%%%%/g;$p' |grep -om 1 'menuentry\\ [^&#123;]*&#123;[^&#125;]*&#125;%%%%%%%' |sed 's/%%%%%%%/\\n/g' &gt;$READGRUB LoadNum=\"$(cat $READGRUB |grep -c 'menuentry ')\" if [[ \"$LoadNum\" -eq '1' ]]; then cat $READGRUB |sed '/^$/d' &gt;/tmp/grub.new; elif [[ \"$LoadNum\" -gt '1' ]]; then CFG0=\"$(awk '/menuentry /&#123;print NR&#125;' $READGRUB|head -n 1)\"; CFG2=\"$(awk '/menuentry /&#123;print NR&#125;' $READGRUB|head -n 2 |tail -n 1)\"; CFG1=\"\"; for tmpCFG in `awk '/&#125;/&#123;print NR&#125;' $READGRUB` do [ \"$tmpCFG\" -gt \"$CFG0\" -a \"$tmpCFG\" -lt \"$CFG2\" ] &amp;&amp; CFG1=\"$tmpCFG\"; done [[ -z \"$CFG1\" ]] &amp;&amp; &#123; echo \"Error! read $GRUBFILE. \"; exit 1; &#125; sed -n \"$CFG0,$CFG1\"p $READGRUB &gt;/tmp/grub.new; [[ -f /tmp/grub.new ]] &amp;&amp; [[ \"$(grep -c '&#123;' /tmp/grub.new)\" -eq \"$(grep -c '&#125;' /tmp/grub.new)\" ]] || &#123; echo -ne \"\\033[31mError! \\033[0mNot configure $GRUBFILE. \\n\"; exit 1; &#125; fi [ ! -f /tmp/grub.new ] &amp;&amp; echo \"Error! $GRUBFILE. \" &amp;&amp; exit 1; sed -i \"/menuentry.*/c\\menuentry\\ \\'Install OS \\[$DIST\\ $VER\\]\\'\\ --class debian\\ --class\\ gnu-linux\\ --class\\ gnu\\ --class\\ os\\ \\&#123;\" /tmp/grub.new sed -i \"/echo.*Loading/d\" /tmp/grub.new; INSERTGRUB=\"$(awk '/menuentry /&#123;print NR&#125;' $GRUBDIR/$GRUBFILE|head -n 1)\"&#125; [[ \"$GRUBOLD\" == '1' ]] &amp;&amp; &#123; CFG0=\"$(awk '/title[\\ ]|title[\\t]/&#123;print NR&#125;' $GRUBDIR/$GRUBFILE|head -n 1)\"; CFG1=\"$(awk '/title[\\ ]|title[\\t]/&#123;print NR&#125;' $GRUBDIR/$GRUBFILE|head -n 2 |tail -n 1)\"; [[ -n $CFG0 ]] &amp;&amp; [ -z $CFG1 -o $CFG1 == $CFG0 ] &amp;&amp; sed -n \"$CFG0,$\"p $GRUBDIR/$GRUBFILE &gt;/tmp/grub.new; [[ -n $CFG0 ]] &amp;&amp; [ -z $CFG1 -o $CFG1 != $CFG0 ] &amp;&amp; sed -n \"$CFG0,$[$CFG1-1]\"p $GRUBDIR/$GRUBFILE &gt;/tmp/grub.new; [[ ! -f /tmp/grub.new ]] &amp;&amp; echo \"Error! configure append $GRUBFILE. \" &amp;&amp; exit 1; sed -i \"/title.*/c\\title\\ \\'Install OS \\[$DIST\\ $VER\\]\\'\" /tmp/grub.new; sed -i '/^#/d' /tmp/grub.new; INSERTGRUB=\"$(awk '/title[\\ ]|title[\\t]/&#123;print NR&#125;' $GRUBDIR/$GRUBFILE|head -n 1)\"&#125; [[ -n \"$(grep 'linux.*/\\|kernel.*/' /tmp/grub.new |awk '&#123;print $2&#125;' |tail -n 1 |grep '^/boot/')\" ]] &amp;&amp; Type='InBoot' || Type='NoBoot'; LinuxKernel=\"$(grep 'linux.*/\\|kernel.*/' /tmp/grub.new |awk '&#123;print $1&#125;' |head -n 1)\";[[ -z \"$LinuxKernel\" ]] &amp;&amp; echo \"Error! read grub config! \" &amp;&amp; exit 1;LinuxIMG=\"$(grep 'initrd.*/' /tmp/grub.new |awk '&#123;print $1&#125;' |tail -n 1)\";[ -z \"$LinuxIMG\" ] &amp;&amp; sed -i \"/$LinuxKernel.*\\//a\\\\\\tinitrd\\ \\/\" /tmp/grub.new &amp;&amp; LinuxIMG='initrd'; if [[ \"$linuxdists\" == 'debian' ]] || [[ \"$linuxdists\" == 'ubuntu' ]]; then BOOT_OPTION=\"auto=true hostname=$linuxdists domain= -- quiet\"elif [[ \"$linuxdists\" == 'centos' ]]; then BOOT_OPTION=\"ks=file://ks.cfg ksdevice=link\"fi [[ \"$Type\" == 'InBoot' ]] &amp;&amp; &#123; sed -i \"/$LinuxKernel.*\\//c\\\\\\t$LinuxKernel\\\\t\\/boot\\/vmlinuz $BOOT_OPTION\" /tmp/grub.new; sed -i \"/$LinuxIMG.*\\//c\\\\\\t$LinuxIMG\\\\t\\/boot\\/initrd.img\" /tmp/grub.new;&#125; [[ \"$Type\" == 'NoBoot' ]] &amp;&amp; &#123; sed -i \"/$LinuxKernel.*\\//c\\\\\\t$LinuxKernel\\\\t\\/vmlinuz $BOOT_OPTION\" /tmp/grub.new; sed -i \"/$LinuxIMG.*\\//c\\\\\\t$LinuxIMG\\\\t\\/initrd.img\" /tmp/grub.new;&#125; sed -i '$a\\\\n' /tmp/grub.new; [[ \"$inVNC\" == 'n' ]] &amp;&amp; &#123;GRUBPATCH='0'; [ -f '/etc/network/interfaces' -o -d '/etc/sysconfig/network-scripts' ] || &#123; echo \"Error, Not found interfaces config.\"; exit 1;&#125; sed -i ''$&#123;INSERTGRUB&#125;'i\\\\n' $GRUBDIR/$GRUBFILE;sed -i ''$&#123;INSERTGRUB&#125;'r /tmp/grub.new' $GRUBDIR/$GRUBFILE;[[ -f $GRUBDIR/grubenv ]] &amp;&amp; sed -i 's/saved_entry/#saved_entry/g' $GRUBDIR/grubenv; [[ -d /boot/tmp ]] &amp;&amp; rm -rf /boot/tmp;mkdir -p /boot/tmp;cd /boot/tmp;if [[ \"$linuxdists\" == 'debian' ]] || [[ \"$linuxdists\" == 'ubuntu' ]]; then COMPTYPE=\"gzip\";elif [[ \"$linuxdists\" == 'centos' ]]; then COMPTYPE=\"$(file /boot/initrd.img |grep -o ':.*compressed data' |cut -d' ' -f2 |sed -r 's/(.*)/\\L\\1/' |head -n1)\" [[ -z \"$COMPTYPE\" ]] &amp;&amp; echo \"Detect compressed type fail.\" &amp;&amp; exit 1;fiCompDected='0'for ListCOMP in `echo -en 'gzip\\nlzma\\nxz'` do if [[ \"$COMPTYPE\" == \"$ListCOMP\" ]]; then CompDected='1' if [[ \"$COMPTYPE\" == 'gzip' ]]; then NewIMG=\"initrd.img.gz\" else NewIMG=\"initrd.img.$COMPTYPE\" fi mv -f \"/boot/initrd.img\" \"/boot/$NewIMG\" break; fi done[[ \"$CompDected\" != '1' ]] &amp;&amp; echo \"Detect compressed type not support.\" &amp;&amp; exit 1;[[ \"$COMPTYPE\" == 'lzma' ]] &amp;&amp; UNCOMP='xz --format=lzma --decompress';[[ \"$COMPTYPE\" == 'xz' ]] &amp;&amp; UNCOMP='xz --decompress';[[ \"$COMPTYPE\" == 'gzip' ]] &amp;&amp; UNCOMP='gzip -d'; $UNCOMP &lt; ../$NewIMG | cpio --extract --verbose --make-directories --no-absolute-filenames &gt;&gt;/dev/null 2&gt;&amp;1 if [[ \"$linuxdists\" == 'debian' ]] || [[ \"$linuxdists\" == 'ubuntu' ]]; thencat &gt;/boot/tmp/preseed.cfg&lt;&lt;EOFd-i debian-installer/locale string en_USd-i console-setup/layoutcode string us d-i keyboard-configuration/xkb-keymap string us d-i netcfg/choose_interface select auto d-i netcfg/disable_autoconfig boolean trued-i netcfg/dhcp_failed noted-i netcfg/dhcp_options select Configure network manuallyd-i netcfg/get_ipaddress string $IPv4d-i netcfg/get_netmask string $MASKd-i netcfg/get_gateway string $GATEd-i netcfg/get_nameservers string 8.8.8.8d-i netcfg/no_default_route boolean trued-i netcfg/confirm_static boolean true d-i hw-detect/load_firmware boolean true d-i mirror/country string manuald-i mirror/http/hostname string $MirrorHostd-i mirror/http/directory string $MirrorFolderd-i mirror/http/proxy string d-i passwd/root-login boolean tured-i passwd/make-user boolean falsed-i passwd/root-password-crypted password $myPASSWORDd-i user-setup/allow-password-weak boolean trued-i user-setup/encrypt-home boolean false d-i clock-setup/utc boolean trued-i time/zone string US/Easternd-i clock-setup/ntp boolean true d-i preseed/early_command string anna-install libfuse2-udeb fuse-udeb ntfs-3g-udeb fuse-modules-3.16.0-4-amd64-did-i partman/early_command string \\debconf-set partman-auto/disk \"\\$(list-devices disk |head -n1)\"; \\wget -qO- '$DDURL' |gunzip -dc |/bin/dd of=\\$(list-devices disk |head -n1); \\mount.ntfs-3g \\$(list-devices partition |head -n1) /mnt; \\cd '/mnt/ProgramData/Microsoft/Windows/Start Menu/Programs'; \\cd Start* || cd start*; \\cp -f '/net.bat' './net.bat'; \\/sbin/reboot; \\debconf-set grub-installer/bootdev string \"\\$(list-devices disk |head -n1)\"; \\umount /media || true; \\ d-i partman/mount_style select uuidd-i partman-auto/init_automatically_partition select Guided - use entire diskd-i partman-auto/method string regulard-i partman-lvm/device_remove_lvm boolean trued-i partman-md/device_remove_md boolean trued-i partman-auto/choose_recipe select atomicd-i partman-partitioning/confirm_write_new_label boolean trued-i partman/choose_partition select finishd-i partman-lvm/confirm boolean trued-i partman-lvm/confirm_nooverwrite boolean trued-i partman/confirm boolean trued-i partman/confirm_nooverwrite boolean true d-i debian-installer/allow_unauthenticated boolean true tasksel tasksel/first multiselect minimald-i pkgsel/update-policy select noned-i pkgsel/include string openssh-serverd-i pkgsel/upgrade select nonepopularity-contest popularity-contest/participate boolean falsed-i grub-installer/only_debian boolean trued-i grub-installer/bootdev string defaultd-i finish-install/reboot_in_progress noted-i debian-installer/exit/reboot boolean trued-i preseed/late_command string \\sed -ri 's/^#?PermitRootLogin.*/PermitRootLogin yes/g' /target/etc/ssh/sshd_config; \\sed -ri 's/^#?PasswordAuthentication.*/PasswordAuthentication yes/g' /target/etc/ssh/sshd_config;EOF[[ \"$setNet\" == '0' ]] &amp;&amp; [[ \"$AutoNet\" == '1' ]] &amp;&amp; &#123; sed -i '/netcfg\\/disable_autoconfig/d' /boot/tmp/preseed.cfg sed -i '/netcfg\\/dhcp_options/d' /boot/tmp/preseed.cfg sed -i '/netcfg\\/get_.*/d' /boot/tmp/preseed.cfg sed -i '/netcfg\\/confirm_static/d' /boot/tmp/preseed.cfg&#125;[[ \"$DIST\" == 'trusty' ]] &amp;&amp; GRUBPATCH='1'[[ \"$DIST\" == 'wily' ]] &amp;&amp; GRUBPATCH='1' [[ \"$GRUBPATCH\" == '1' ]] &amp;&amp; &#123; sed -i 's/^d-i\\ grub-installer\\/bootdev\\ string\\ default//g' /boot/tmp/preseed.cfg&#125;[[ \"$GRUBPATCH\" == '0' ]] &amp;&amp; &#123; sed -i 's/debconf-set\\ grub-installer\\/bootdev.*\\\"\\;//g' /boot/tmp/preseed.cfg&#125;[[ \"$DIST\" == 'xenial' ]] &amp;&amp; &#123; sed -i 's/^d-i\\ clock-setup\\/ntp\\ boolean\\ true/d-i\\ clock-setup\\/ntp\\ boolean\\ false/g' /boot/tmp/preseed.cfg&#125;[[ \"$linuxdists\" == 'debian' ]] &amp;&amp; &#123; sed -i '/user-setup\\/allow-password-weak/d' /boot/tmp/preseed.cfg sed -i '/user-setup\\/encrypt-home/d' /boot/tmp/preseed.cfg sed -i '/pkgsel\\/update-policy/d' /boot/tmp/preseed.cfg sed -i 's/umount\\ \\/media.*true\\;\\ //g' /boot/tmp/preseed.cfg&#125;[[ \"$INCFW\" == '1' ]] &amp;&amp; [[ \"$linuxdists\" == 'debian' ]] &amp;&amp; [[ -f '/boot/firmware.cpio.gz' ]] &amp;&amp; &#123; gzip -d &lt; ../firmware.cpio.gz | cpio --extract --verbose --make-directories --no-absolute-filenames &gt;&gt;/dev/null 2&gt;&amp;1&#125;[[ \"$ddMode\" == '1' ]] &amp;&amp; &#123;WinDHCP()&#123; echo -ne \"@ECHO OFF\\r\\ncd\\040\\057d\\040\\042\\045ProgramData\\045\\057Microsoft\\057Windows\\057Start\\040Menu\\057Programs\\057Startup\\042\\r\\ndel\\040\\057f\\040\\057q\\040net\\056bat\\r\\n\\r\\n\" &gt;'/boot/tmp/net.tmp';&#125;WinNoDHCP()&#123; echo -ne \"@ECHO OFF\\r\\ncd\\056\\076\\045windir\\045\\GetAdmin\\r\\nif\\040exist\\040\\045windir\\045\\GetAdmin\\040\\050del\\040\\057f\\040\\057q\\040\\042\\045windir\\045\\GetAdmin\\042\\051\\040else\\040\\050\\r\\necho\\040CreateObject^\\050\\042Shell\\056Application\\042^\\051\\056ShellExecute\\040\\042\\045~s0\\042\\054\\040\\042\\045\\052\\042\\054\\040\\042\\042\\054\\040\\042runas\\042\\054\\040\\061\\040\\076\\076\\040\\042\\045temp\\045\\Admin\\056vbs\\042\\r\\n\\042\\045temp\\045\\Admin\\056vbs\\042\\r\\ndel\\040\\057f\\040\\057q\\040\\042\\045temp\\045\\Admin\\056vbs\\042\\r\\nexit\\040\\057b\\040\\062\\051\\r\\nfor\\040\\057f\\040\\042tokens=\\063\\052\\042\\040\\045\\045i\\040in\\040\\050\\047netsh\\040interface\\040show\\040interface\\040^|more\\040+3\\040^|findstr\\040\\057R\\040\\042\\u672c\\u5730\\056\\052\\040\\u4ee5\\u592a\\056\\052\\040Local\\056\\052\\040Ethernet\\042\\047\\051\\040do\\040\\050set\\040EthName=\\045\\045j\\051\\r\\nnetsh\\040-c\\040interface\\040ip\\040set\\040address\\040name=\\042\\045EthName\\045\\042\\040source=static\\040address=$IPv4\\040mask=$MASK\\040gateway=$GATE\\r\\nnetsh\\040-c\\040interface\\040ip\\040add\\040dnsservers\\040name=\\042\\045EthName\\045\\042\\040address=\\070\\056\\070\\056\\070\\056\\070\\040index=1\\040validate=no\\r\\nnetsh\\040-c\\040interface\\040ip\\040add\\040dnsservers\\040name=\\042\\045EthName\\045\\042\\040address=\\070\\056\\070\\056\\064\\056\\064\\040index=2\\040validate=no\\r\\ncd\\040\\057d\\040\\042\\045ProgramData\\045\\057Microsoft\\057Windows\\057Start\\040Menu\\057Programs\\057Startup\\042\\r\\ndel\\040\\057f\\040\\057q\\040net\\056bat\\r\\n\\r\\n\" &gt;'/boot/tmp/net.tmp';&#125; [[ \"$setNet\" == '1' ]] &amp;&amp; WinNoDHCP; [[ \"$setNet\" == '0' ]] &amp;&amp; &#123; [[ \"$AutoNet\" -eq '1' ]] &amp;&amp; WinDHCP; [[ \"$AutoNet\" -eq '0' ]] &amp;&amp; WinNoDHCP; &#125; iconv -f 'UTF-8' -t 'GBK' '/boot/tmp/net.tmp' -o '/boot/tmp/net.bat' rm -rf '/boot/tmp/net.tmp' echo \"$DDURL\" |grep -q '^https://' [[ $? -eq '0' ]] &amp;&amp; &#123; echo -ne '\\nAdd ssl support...\\n' [[ -n $SSL_SUPPORT ]] &amp;&amp; &#123; wget --no-check-certificate -qO- \"$SSL_SUPPORT\" |tar -x [[ ! -f /boot/tmp/usr/bin/wget ]] &amp;&amp; echo 'Error! SSL_SUPPORT.' &amp;&amp; exit 1; sed -i 's/wget\\ -qO-/\\/usr\\/bin\\/wget\\ --no-check-certificate\\ --retry-connrefused\\ --tries=7\\ --continue\\ -qO-/g' /boot/tmp/preseed.cfg [[ $? -eq '0' ]] &amp;&amp; echo -ne 'Success! \\n\\n' &#125; || &#123; echo -ne 'Not ssl support package! \\n\\n'; exit 1; &#125; &#125;&#125;[[ \"$ddMode\" == '0' ]] &amp;&amp; &#123; sed -i '/anna-install/d' /boot/tmp/preseed.cfg sed -i 's/wget.*\\/sbin\\/reboot\\;\\ //g' /boot/tmp/preseed.cfg&#125; elif [[ \"$linuxdists\" == 'centos' ]]; thencat &gt;/boot/tmp/ks.cfg&lt;&lt;EOF#platform=x86, AMD64, or Intel EM64Tfirewall --enabled --sshinstallurl --url=\"http://$DISTMirror/$DIST/os/$VER/\"rootpw --iscrypted $myPASSWORDauth --useshadow --passalgo=sha512firstboot --disablelang en_USkeyboard usselinux --disabledlogging --level=inforeboottextunsupported_hardwarevncskipxtimezone --isUtc Asia/Hong_Kong#ONDHCP network --bootproto=dhcp --onboot=on#NODHCP network --bootproto=static --ip=$IPv4 --netmask=$MASK --gateway=$GATE --nameserver=8.8.8.8 --onboot=onbootloader --location=mbr --append=\"rhgb quiet crashkernel=auto\"zerombrclearpart --all --initlabel autopart%packages@base%end%post --interpreter=/bin/bashrm -rf /root/anaconda-ks.cfgrm -rf /root/install.*log%endEOF[[ \"$setNet\" == '0' ]] &amp;&amp; [[ \"$AutoNet\" == '1' ]] &amp;&amp; &#123; sed -i 's/#ONDHCP\\ //g' /boot/tmp/ks.cfg&#125; || &#123; sed -i 's/#NODHCP\\ //g' /boot/tmp/ks.cfg&#125;[[ \"$UNKNOWHW\" == '1' ]] &amp;&amp; sed -i 's/^unsupported_hardware/#unsupported_hardware/g' /boot/tmp/ks.cfg[[ \"$(echo \"$DIST\" |grep -o '^[0-9]\\&#123;1\\&#125;')\" == '5' ]] &amp;&amp; sed -i '0,/^%end/s//#%end/' /boot/tmp/ks.cfgfi rm -rf ../initrd.img;find . | cpio -H newc --create --verbose | gzip -9 &gt; ../initrd.img;rm -rf /boot/tmp;&#125;[[ \"$inVNC\" == 'y' ]] &amp;&amp; &#123; sed -i '$i\\\\n' $GRUBDIR/$GRUBFILE sed -i '$r /tmp/grub.new' $GRUBDIR/$GRUBFILE echo -e \"\\n\\033[33m\\033[04mIt will reboot! \\nPlease look at VNC! \\nSelect\\033[0m\\033[32m Install OS [$DIST $VER] \\033[33m\\033[4mto install system.\\033[04m\\n\\n\\033[31m\\033[04mThere is some information for you.\\nDO NOT CLOSE THE WINDOW! \\033[0m\\n\" echo -e \"\\033[35mIPv4\\t\\tNETMASK\\t\\tGATEWAY\\033[0m\" echo -e \"\\033[36m\\033[04m$IPv4\\033[0m\\t\\033[36m\\033[04m$MASK\\033[0m\\t\\033[36m\\033[04m$GATE\\033[0m\\n\\n\" read -n 1 -p \"Press Enter to reboot...\" INP [[ \"$INP\" != '' ]] &amp;&amp; echo -ne '\\b \\n\\n';&#125;chown root:root $GRUBDIR/$GRUBFILEchmod 444 $GRUBDIR/$GRUBFILEsleep 3 &amp;&amp; reboot &gt;/dev/null 2&gt;&amp;1 再次声明本教程转自萌咖大佬官网点我访问END！","path":"2018/04/23/linuxvps/","date":"04-23","excerpt":"转载 Debian/Ubuntu/CentOS 网络安装/重装系统/纯净安装 一键脚本作者:萌咖大佬","preview":"http://7xi7my.com1.z0.glb.clouddn.com/pre806.jpg"},{"title":"ovs-sriov综合策略脚本","text":"这个一键脚本是我的一个毕设，目前还是一个测试版实验使用的是:intel 82599 网卡 支持SRIOV容器使用的是 Docker Ubuntu系统使用的是:Centos 7.4 欢迎访问我的GitHub 为了提供一系列建议作者:ZD点击进入此项目的GitHub一、优化之前同主机不同服务进行一系列请求 不同主机跨主机访问 二、优化之后同主机不同服务进行一系列请求 不同主机跨主机访问 Docker镜像请自己准备，此脚本和本人并不提供！！！123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196#!bin/sh#pipework br1 -i eth0 test1 192.168.2.2/24haproxycfg() &#123; sleep 1 rm -rf /haproxy_test mkdir /haproxy_test echo \"输入的参数个数为: $#\" #“$#”会显示传给该函数的参数个数 echo \"所有参数为: $@\" #“$@”会显示所有传给函数的参数 echo \"$1: $1\" echo \"$2: $2\" echo \"$3: $3\" native_ip=$1 next_ip1=$2 next_ip2=$3 echo \"#---------------------------------------------------------------------# Example configuration for a possible web application. See the# full configuration options online.## http://haproxy.1wt.eu/download/1.4/doc/configuration.txt##---------------------------------------------------------------------#---------------------------------------------------------------------# Global settings#---------------------------------------------------------------------global # to have these messages end up in /var/log/haproxy.log you will # need to: # # 1) configure syslog to accept network log events. This is done # by adding the '-r' option to the SYSLOGD_OPTIONS in # /etc/sysconfig/syslog # # 2) configure local2 events to go to the /var/log/haproxy.log # file. A line like the following can be added to # /etc/sysconfig/syslog # # local2.* /var/log/haproxy.log # log 127.0.0.1 local2 chroot /var/lib/haproxy pidfile /var/run/haproxy.pid maxconn 1000000 user haproxy group haproxy daemon # turn on stats unix socket stats socket /var/lib/haproxy/stats#---------------------------------------------------------------------# main frontend which proxys to the backends#---------------------------------------------------------------------frontend haproxy $native_ip:80 mode tcp log global option tcplog timeout client 3600s backlog 4096 maxconn 1000000 default_backend sink#---------------------------------------------------------------------# round robin balancing between the various backends#---------------------------------------------------------------------backend sink balance roundrobin mode tcp option log-health-checks option redispatch option tcplog server app1 $next_ip1 server app2 $next_ip2 #server app1 172.88.0.4:80# server app1 172.18.60.100:50001# server app2 173.168.100.7:50002# server app3 173.168.100.7:50003# server app4 173.168.100.7:50004 timeout connect 1s timeout queue 5s timeout server 3600s\"&gt;&gt;/haproxy_test/haproxy.cfg&#125;iptablescfg()&#123; sleep 1 #br=$1 iptables_sriov=$1 ip=$2 ip2=$3 next_ip=$4 netcard_name1=$5 netcard_name2=$6 ip3=$7 sleep 1 docker run -itd --privileged=true --net=none --name=$iptables_sriov 6d6fd32fa013 /bin/bash sleep 1 #pipework $br -i eth0 $iptables_br $ip/24'@'$getway pipework --direct-phys $netcard_name1 -i eth0 $iptables_sriov $ip/24 sleep 1 ovs-docker add-port br0 eth1 $iptables_sriov --ipaddress=$ip2/24 #pipework $br -i eth1 $iptables_br $ip2/24'@'$getway pipework --direct-phys $netcard_name2 -i eth2 $iptables_sriov $ip3/24 sleep 1 docker exec -it $iptables_sriov iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j DNAT --to $next_ip:80 sleep 1 docker exec -it $iptables_sriov iptables -t nat -A POSTROUTING -j MASQUERADE -o eth1&#125;haproxy_run()&#123; sleep 1 haproxy_name=$1 sriov_ip=$2 haproxy_next_ip1=$3 haproxy_next_ip2=$4 haproxy_netcardname=$5 ovs_briage=$6 #ovs_netcard=$7 ovs_address=$7 docker run -itd --privileged=true --net=none --name=$haproxy_name 878f003a137e /bin/bash pipework --direct-phys $haproxy_netcardname -i eth0 $haproxy_name $sriov_ip/24 add_ovs_switch $ovs_briage eth1 $haproxy_name $ovs_address sleep 1 docker exec -it $haproxy_name iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j DNAT --to $haproxy_next_ip1:80 sleep 1 docker exec -it $haproxy_name iptables -t nat -A POSTROUTING -j MASQUERADE -o eth1 #docker exec -it $haproxy_name ip route add 192.168.1.0/24 via $sriov_ip haproxycfg $ovs_address $haproxy_next_ip1 $haproxy_next_ip2 docker cp /haproxy_test/haproxy.cfg $haproxy_name:/root/ docker exec -it $haproxy_name haproxy -f /root/haproxy.cfg &gt;/dev/null&#125;apache_run()&#123; sleep 1 apache2_name=$1 apache2_ip=$2 apache_netcardname=$3 apache_ovs_brige=$4 apache_ovs_ip=$5 docker run -itd --privileged=true --net=none --name=$apache2_name 42468c9f6ce6 /bin/bash pipework --direct-phys $apache_netcardname -i eth0 $apache2_name $apache2_ip/24 ovs-docker add-port $apache_ovs_brige eth1 $apache2_name --ipaddress=$apache_ovs_ip/24 docker exec -it $apache2_name /etc/init.d/apache2 start &gt;/dev/null #docker exec -it $apache2_name ip route add 192.168.1.0/24 via $apache2_ip&#125;add_ovs_switch()&#123; sleep 1 ovs_briage=$1 docker_netcard=$2 docker_name=$3 docker_ipaddress=$4 ovs-docker add-port $ovs_briage $docker_netcard $docker_name --ipaddress=$docker_ipaddress/24 #ovs-docker add-port br0 eth0 haproxy --ipaddress=192.168.30.2/24&#125;haproxy_run_ovs()&#123; sleep 1 haproxy_name=$1 current_ip=$2 haproxy_next_ip1=$3 haproxy_next_ip2=$4 ovs_briage=$5 netcardname=$6 ip_sriov=$7 docker run -itd --privileged=true --net=none --name=$haproxy_name 878f003a137e /bin/bash ovs-docker add-port $ovs_briage eth0 $haproxy_name --ipaddress=$current_ip/24 pipework --direct-phys $netcardname -i eth1 $haproxy_name $ip_sriov/24 haproxycfg $current_ip $haproxy_next_ip1 $haproxy_next_ip2 docker cp /haproxy_test/haproxy.cfg $haproxy_name:/root/ docker exec -it $haproxy_name haproxy -f /root/haproxy.cfg &gt;/dev/null #docker exec -it $haproxy_name ip route add 192.168.1.0/24 via $ip_sriov&#125;on_start()&#123;#配置文件 iptablescfg iptables_sriov 192.168.1.3 172.17.1.2 172.17.1.3 enp9s21f6 enp9s22 192.168.1.21 haproxy_run_ovs haproxy_sriov3 172.17.1.3 172.17.1.4 172.17.1.5 br0 enp9s27f6 192.168.1.22 haproxy_run haproxy_sriov4 192.168.1.23 172.17.1.6 172.17.1.6 enp9s28 br0 172.17.1.4 haproxy_run haproxy_sriov5 192.168.1.24 172.17.1.6 172.17.1.6 enp9s28f2 br0 172.17.1.4 haproxy_run haproxy_sriov6 192.168.1.25 172.17.1.7 172.17.1.7 enp9s28f4 br0 172.17.1.5 haproxy_run haproxy_sriov7 192.168.1.26 172.17.1.8 172.17.1.8 enp9s28f6 br0 172.17.1.6 haproxy_run haproxy_sriov8 192.168.1.27 172.17.1.9 172.17.1.9 enp9s29 br0 172.17.1.7 haproxy_run haproxy_sriov9 192.168.1.28 172.17.1.10 172.17.1.10 enp9s29f2 br0 172.17.1.8 haproxy_run haproxy_sriov10 192.168.1.29 172.17.1.11 172.17.1.11 enp9s29f4 br0 172.17.1.9 haproxy_run haproxy_sriov11 192.168.1.30 172.17.1.12 172.17.1.12 enp9s29f6 br0 172.17.1.10 haproxy_run haproxy_sriov12 192.168.1.31 172.17.1.13 172.17.1.13 enp9s30 br0 172.17.1.11 haproxy_run haproxy_sriov13 192.168.1.32 172.17.1.14 172.17.1.14 enp9s30f2 br0 172.17.1.12 haproxy_run haproxy_sriov14 192.168.1.33 172.17.1.15 172.17.1.15 enp9s30f4 br0 172.17.1.13 haproxy_run haproxy_sriov15 192.168.1.34 172.17.1.16 172.17.1.16 enp9s30f6 br0 172.17.1.14 haproxy_run haproxy_sriov16 192.168.1.35 172.17.1.17 172.17.1.17 enp9s16 br0 172.17.1.15 haproxy_run haproxy_sriov17 192.168.1.36 172.17.1.18 172.17.1.18 enp9s16f4 br0 172.17.1.16 haproxy_run haproxy_sriov18 192.168.1.37 172.17.1.19 172.17.1.19 enp9s16f6 br0 172.17.1.17 haproxy_run haproxy_sriov19 192.168.1.38 172.17.1.20 172.17.1.20 enp9s17 br0 172.17.1.18 haproxy_run haproxy_sriov20 192.168.1.39 172.17.1.21 172.17.1.21 enp9s17f2 br0 172.17.1.19 apache_run apaches21_sriov1 192.168.1.40 enp9s17f4 br0 172.17.1.20 apache_run apaches22_sriov2 192.168.1.41 enp9s17f6 br0 172.17.1.21&#125;on_start Create By ZD-CNU","path":"2018/04/21/ovs-sriov/","date":"04-21","excerpt":"这个一键脚本是我的一个毕设，目前还是一个测试版实验使用的是:intel 82599 网卡 支持SRIOV容器使用的是 Docker Ubuntu系统使用的是:Centos 7.4","preview":"http://7xi7my.com1.z0.glb.clouddn.com/pre803.jpg"},{"title":"linux脚本集合","text":"集成了许多linux一键脚本，个人已测试 gost一键安装脚本:1wget http://app-10063497.cossh.myqcloud.com/%E6%96%B0%E6%B7%B7%E6%B7%86ssr/gost/gost20171115.sh &amp;&amp; bash gost20171115.sh 秋水逸冰BBR一键安装脚本1wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh chmod +x bbr.sh ./bbr.sh centos BBR一键安装123wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.shchmod +x shadowsocksR.sh./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log 自己的脚本1wget http://kymg-1251387941.cosbj.myqcloud.com/yd.sh &amp;&amp; chmod +x yd.sh &amp;&amp; ./yd.sh V2ray官方Centos 7.x 一键脚本1wget http://v2ray-1251387941.cosbj.myqcloud.com/v2ray.sh &amp;&amp; chmod +x v2ray.sh &amp;&amp; ./v2ray.sh 宝塔面板(bt.cn) 快速部署Centos 安装命令：1yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh Ubuntu/Deepin 安装命令：1wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; sudo bash install.sh Debian 安装命令：1wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; bash install.sh Fedora 安装命令:1wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; bash install.sh","path":"2018/04/21/linuxbash/","date":"04-21","excerpt":"集成了许多linux一键脚本，个人已测试","preview":"http://7xi7my.com1.z0.glb.clouddn.com/pre815.jpg"},{"title":"快云OP魔改版","text":"一键脚本快云Op一键搭建脚本,修复了OP版本问题，centos 7.2搭建,已经测试成功搭建 快云一键脚本地址:1wget http://kymg-1251387941.cosbj.myqcloud.com/yd.sh &amp;&amp; chmod +x yd.sh &amp;&amp; ./yd.sh 快云截图管理界面 快云管理员面板截图 主界面随意替换 快云截图主界面 说明:暂时还有一个未修复:二级密码还未修复","path":"2018/04/21/hello-world/","date":"04-21","excerpt":"一键脚本快云Op一键搭建脚本,修复了OP版本问题，centos 7.2搭建,已经测试成功搭建","preview":"http://7xi7my.com1.z0.glb.clouddn.com/pre816.jpg"}]}